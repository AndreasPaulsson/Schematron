<?xml version="1.0" encoding="utf-8"?>
<ndoc>
  <copyright text="NMatrix Project" href="sourceforge.net" />
  <assembly name="Schematron" version="0.5.971.41846">
    <module name="Schematron.dll">
      <namespace name="Schematron.Formatters">
        <class name="BaseFormatter" id="T:Schematron.Formatters.BaseFormatter" access="Public" abstract="true">
          <documentation>
            <summary />
          </documentation>
          <implements>IFormatter</implements>
          <constructor name=".ctor" id="M:Schematron.Formatters.BaseFormatter.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the BaseFormatter class.</summary>
              <summary />
            </documentation>
          </constructor>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(System.Xml.Schema.ValidationEventArgs)" access="Public" contract="Virtual" overload="1" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(System.Xml.XmlValidatingReader,System.String)" access="Public" contract="Virtual" overload="2" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.Xml.XmlValidatingReader" />
            <parameter name="messages" type="System.String" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(Schematron.Schema,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" overload="3" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Schema" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(Schematron.Phase,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" overload="4" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Phase" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(Schematron.Pattern,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" overload="5" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Pattern" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(Schematron.Rule,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" overload="6" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Rule" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BaseFormatter.Format(Schematron.Test,System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" overload="7" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Test" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.Formatters.BaseFormatter.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Formatters.BaseFormatter.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Formatters.BaseFormatter.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Formatters.BaseFormatter.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Formatters.BaseFormatter.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Formatters.BaseFormatter.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="BooleanFormatter" id="T:Schematron.Formatters.BooleanFormatter" access="Public" baseType="BaseFormatter">
          <documentation>
            <summary />
          </documentation>
          <base name="BaseFormatter" id="T:Schematron.Formatters.BaseFormatter" type="Schematron.Formatters.BaseFormatter" />
          <implements>IFormatter</implements>
          <constructor name=".ctor" id="M:Schematron.Formatters.BooleanFormatter.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the BooleanFormatter class.</summary>
              <summary />
            </documentation>
          </constructor>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(System.Xml.Schema.ValidationEventArgs)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="1" returnType="System.String">
            <parameter name="source" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(System.Xml.XmlValidatingReader,System.String)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="2" returnType="System.String">
            <parameter name="reader" type="System.Xml.XmlValidatingReader" />
            <parameter name="messages" type="System.String" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(Schematron.Schema,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="3" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Schema" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(Schematron.Phase,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="4" returnType="System.String">
            <parameter name="source" type="Schematron.Phase" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(Schematron.Pattern,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="5" returnType="System.String">
            <parameter name="source" type="Schematron.Pattern" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(Schematron.Rule,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="6" returnType="System.String">
            <parameter name="source" type="Schematron.Rule" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.BooleanFormatter.Format(Schematron.Test,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="7" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Test" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.Formatters.BooleanFormatter.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Formatters.BooleanFormatter.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Formatters.BooleanFormatter.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Formatters.BooleanFormatter.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Formatters.BooleanFormatter.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Formatters.BooleanFormatter.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="FormattingUtils" id="T:Schematron.Formatters.FormattingUtils" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Formatters.FormattingUtils.#ctor" access="Private">
            <documentation>
              <summary>Initializes a new instance of the FormattingUtils class.</summary>
            </documentation>
          </constructor>
          <field name="_normalize" id="F:Schematron.Formatters.FormattingUtils._normalize" access="Private" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="XmlErrorPosition" id="F:Schematron.Formatters.FormattingUtils.XmlErrorPosition" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static">
            <documentation>
              <summary />
            </documentation>
          </field>
          <method name="Finalize" id="M:Schematron.Formatters.FormattingUtils.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Formatters.FormattingUtils.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Formatters.FormattingUtils.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Formatters.FormattingUtils.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetFullNodePosition" id="M:Schematron.Formatters.FormattingUtils.GetFullNodePosition(System.Xml.XPath.XPathNavigator,System.String)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
            <parameter name="previous" type="System.String" />
          </method>
          <method name="GetPositionInFile" id="M:Schematron.Formatters.FormattingUtils.GetPositionInFile(System.Xml.XPath.XPathNavigator)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="GetNodeSummary" id="M:Schematron.Formatters.FormattingUtils.GetNodeSummary(System.Xml.XPath.XPathNavigator)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="NormalizeString" id="M:Schematron.Formatters.FormattingUtils.NormalizeString(System.String)" access="Public" contract="Static" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="input" type="System.String" />
          </method>
          <method name="GetType" id="M:Schematron.Formatters.FormattingUtils.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Formatters.FormattingUtils.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="LogFormatter" id="T:Schematron.Formatters.LogFormatter" access="Public" baseType="BaseFormatter">
          <documentation>
            <summary />
          </documentation>
          <base name="BaseFormatter" id="T:Schematron.Formatters.BaseFormatter" type="Schematron.Formatters.BaseFormatter" />
          <implements>IFormatter</implements>
          <constructor name=".ctor" id="M:Schematron.Formatters.LogFormatter.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the LogFormatter class.</summary>
              <summary />
            </documentation>
          </constructor>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(System.Xml.Schema.ValidationEventArgs)" access="Public" contract="Override" overload="1" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(System.Xml.XmlValidatingReader,System.String)" access="Public" contract="Override" overload="2" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.Xml.XmlValidatingReader" />
            <parameter name="messages" type="System.String" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(Schematron.Schema,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="3" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Schema" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(Schematron.Phase,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="4" returnType="System.String">
            <parameter name="source" type="Schematron.Phase" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(Schematron.Pattern,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="5" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Pattern" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(Schematron.Rule,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="6" returnType="System.String">
            <parameter name="source" type="Schematron.Rule" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.LogFormatter.Format(Schematron.Test,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="7" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Test" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.Formatters.LogFormatter.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Formatters.LogFormatter.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Formatters.LogFormatter.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Formatters.LogFormatter.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Formatters.LogFormatter.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Formatters.LogFormatter.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="SimpleFormatter" id="T:Schematron.Formatters.SimpleFormatter" access="Public" baseType="LogFormatter">
          <documentation>
            <summary />
          </documentation>
          <base name="LogFormatter" id="T:Schematron.Formatters.LogFormatter" type="Schematron.Formatters.LogFormatter">
            <base name="BaseFormatter" id="T:Schematron.Formatters.BaseFormatter" type="Schematron.Formatters.BaseFormatter" />
          </base>
          <implements>IFormatter</implements>
          <constructor name=".ctor" id="M:Schematron.Formatters.SimpleFormatter.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SimpleFormatter class.</summary>
              <summary />
            </documentation>
          </constructor>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(System.Xml.Schema.ValidationEventArgs)" access="Public" declaringType="Schematron.Formatters.LogFormatter" contract="Override" overload="1" returnType="System.String">
            <parameter name="source" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(System.Xml.XmlValidatingReader,System.String)" access="Public" declaringType="Schematron.Formatters.LogFormatter" contract="Override" overload="2" returnType="System.String">
            <parameter name="reader" type="System.Xml.XmlValidatingReader" />
            <parameter name="messages" type="System.String" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(Schematron.Schema,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.LogFormatter" contract="Override" overload="3" returnType="System.String">
            <parameter name="source" type="Schematron.Schema" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(Schematron.Phase,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="4" returnType="System.String">
            <parameter name="source" type="Schematron.Phase" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(Schematron.Pattern,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.LogFormatter" contract="Override" overload="5" returnType="System.String">
            <parameter name="source" type="Schematron.Pattern" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(Schematron.Rule,System.String,System.Xml.XPath.XPathNavigator)" access="Public" declaringType="Schematron.Formatters.BaseFormatter" contract="Virtual" overload="6" returnType="System.String">
            <parameter name="source" type="Schematron.Rule" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.SimpleFormatter.Format(Schematron.Test,System.Xml.XPath.XPathNavigator)" access="Public" contract="Override" overload="7" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Test" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.Formatters.SimpleFormatter.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Formatters.SimpleFormatter.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Formatters.SimpleFormatter.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Formatters.SimpleFormatter.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Formatters.SimpleFormatter.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Formatters.SimpleFormatter.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <interface name="IFormatter" id="T:Schematron.Formatters.IFormatter" access="Public">
          <documentation>
            <summary />
          </documentation>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(System.Xml.Schema.ValidationEventArgs)" access="Public" contract="Abstract" overload="1" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(System.Xml.XmlValidatingReader,System.String)" access="Public" contract="Abstract" overload="2" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.Xml.XmlValidatingReader" />
            <parameter name="messages" type="System.String" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(Schematron.Schema,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" overload="3" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Schema" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(Schematron.Phase,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" overload="4" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Phase" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(Schematron.Pattern,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" overload="5" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Pattern" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(Schematron.Rule,System.String,System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" overload="6" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Rule" />
            <parameter name="messages" type="System.String" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Format" id="M:Schematron.Formatters.IFormatter.Format(Schematron.Test,System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" overload="7" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="Schematron.Test" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
        </interface>
      </namespace>
      <namespace name="Schematron">
        <documentation>
          <summary>This is the NMatrix Schematron.NET, an implementation of the Schematron standard by Rick Jeliffe.</summary>
        </documentation>
        <class name="EvaluableExpression" id="T:Schematron.EvaluableExpression" access="Public" abstract="true">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.EvaluableExpression.#ctor(System.String)" access="FamilyOrAssembly" overload="1">
            <documentation>
              <summary />
            </documentation>
            <parameter name="xpathExpression" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.EvaluableExpression.#ctor" access="FamilyOrAssembly" overload="2">
            <documentation>
              <summary>Initializes a new instance of the EvaluableExpression class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_xpath" id="F:Schematron.EvaluableExpression._xpath" access="Family" type="System.String">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_expr" id="F:Schematron.EvaluableExpression._expr" access="Family" type="System.Xml.XPath.XPathExpression">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_ns" id="F:Schematron.EvaluableExpression._ns" access="Private" type="System.Xml.XmlNamespaceManager" />
          <property name="CompiledExpression" id="P:Schematron.EvaluableExpression.CompiledExpression" access="Public" type="System.Xml.XPath.XPathExpression" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Expression" id="P:Schematron.EvaluableExpression.Expression" access="Public" type="System.String" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="Finalize" id="M:Schematron.EvaluableExpression.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.EvaluableExpression.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.EvaluableExpression.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.EvaluableExpression.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="InitializeExpression" id="M:Schematron.EvaluableExpression.InitializeExpression(System.String)" access="Family" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="xpathExpression" type="System.String" />
          </method>
          <method name="GetContext" id="M:Schematron.EvaluableExpression.GetContext" access="Public" contract="Normal" returnType="System.Xml.XmlNamespaceManager">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="SetContext" id="M:Schematron.EvaluableExpression.SetContext(System.Xml.XmlNamespaceManager)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="nsManager" type="System.Xml.XmlNamespaceManager" />
          </method>
          <method name="GetType" id="M:Schematron.EvaluableExpression.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.EvaluableExpression.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Test" id="T:Schematron.Test" access="Public" abstract="true" baseType="EvaluableExpression">
          <documentation>
            <summary>
            Base class for testing units of Schematron, such as Assert or Report elements.
            </summary>
          </documentation>
          <base name="EvaluableExpression" id="T:Schematron.EvaluableExpression" type="Schematron.EvaluableExpression" />
          <constructor name=".ctor" id="M:Schematron.Test.#ctor(System.String,System.String)" access="Public">
            <documentation>
              <summary />
              <param name="test">
              </param>
              <param name="message">
              </param>
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </constructor>
          <field name="_msg" id="F:Schematron.Test._msg" access="Family" type="System.String">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_names" id="F:Schematron.Test._names" access="Family" type="System.Text.RegularExpressions.MatchCollection">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_paths" id="F:Schematron.Test._paths" access="Family" type="System.Xml.XPath.XPathExpression[]">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_xpath" id="F:Schematron.Test._xpath" access="Family" type="System.String" declaringType="Schematron.EvaluableExpression" />
          <field name="_expr" id="F:Schematron.Test._expr" access="Family" type="System.Xml.XPath.XPathExpression" declaringType="Schematron.EvaluableExpression" />
          <property name="Message" id="P:Schematron.Test.Message" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="NameExpressions" id="P:Schematron.Test.NameExpressions" access="Public" type="System.Text.RegularExpressions.MatchCollection" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="NamePaths" id="P:Schematron.Test.NamePaths" access="Public" type="System.Xml.XPath.XPathExpression[]" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="CompiledExpression" id="P:Schematron.Test.CompiledExpression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.Xml.XPath.XPathExpression" contract="Normal" get="true" set="false" />
          <property name="Expression" id="P:Schematron.Test.Expression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.String" contract="Normal" get="true" set="false" />
          <method name="Finalize" id="M:Schematron.Test.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Test.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Test.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Test.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="InitializeExpression" id="M:Schematron.Test.InitializeExpression(System.String)" access="Family" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="xpathExpression" type="System.String" />
          </method>
          <method name="GetContext" id="M:Schematron.Test.GetContext" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Xml.XmlNamespaceManager" />
          <method name="SetContext" id="M:Schematron.Test.SetContext(System.Xml.XmlNamespaceManager)" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="nsManager" type="System.Xml.XmlNamespaceManager" />
          </method>
          <method name="GetType" id="M:Schematron.Test.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Test.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Assert" id="T:Schematron.Assert" access="Public" baseType="Test">
          <documentation>
            <summary>
            Represents an assert element of the Schematron schema.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <remarks>
            As stated in the <linkref id="schematron">specificacion</linkref>, this is 
            the lowest element in a Schematron schema. This element contains the expression
            to execute in the context of its parent <see cref="T:Schematron.Rule" />. 
            <para>If the results of the execution of the expression are <c>False</c>, the 
            assert fails and the correponding message will be displayed.</para><para>
            Constructor is not public. To programatically create an instance of this
            class use the <see cref="M:Schematron.Rule.CreateAssert(System.String,System.String)" /> factory method.
            </para><seealso cref="M:Schematron.EvaluationContextBase.Start" /><seealso cref="M:Schematron.AsyncEvaluationContext.Start" /><seealso cref="M:Schematron.SyncEvaluationContext.Start" /></remarks>
          </documentation>
          <base name="Test" id="T:Schematron.Test" type="Schematron.Test">
            <base name="EvaluableExpression" id="T:Schematron.EvaluableExpression" type="Schematron.EvaluableExpression" />
          </base>
          <constructor name=".ctor" id="M:Schematron.Assert.#ctor(System.String,System.String)" access="FamilyOrAssembly">
            <documentation>
              <summary>Constructs a new Assert object.</summary>
              <param name="test">XPath expression to test.</param>
              <param name="message">Message to display if the assert fails.</param>
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </constructor>
          <field name="_msg" id="F:Schematron.Assert._msg" access="Family" type="System.String" declaringType="Schematron.Test" />
          <field name="_names" id="F:Schematron.Assert._names" access="Family" type="System.Text.RegularExpressions.MatchCollection" declaringType="Schematron.Test" />
          <field name="_paths" id="F:Schematron.Assert._paths" access="Family" type="System.Xml.XPath.XPathExpression[]" declaringType="Schematron.Test" />
          <field name="_xpath" id="F:Schematron.Assert._xpath" access="Family" type="System.String" declaringType="Schematron.EvaluableExpression" />
          <field name="_expr" id="F:Schematron.Assert._expr" access="Family" type="System.Xml.XPath.XPathExpression" declaringType="Schematron.EvaluableExpression" />
          <property name="Message" id="P:Schematron.Assert.Message" access="Public" declaringType="Schematron.Test" type="System.String" contract="Normal" get="true" set="true" />
          <property name="NameExpressions" id="P:Schematron.Assert.NameExpressions" access="Public" declaringType="Schematron.Test" type="System.Text.RegularExpressions.MatchCollection" contract="Normal" get="true" set="false" />
          <property name="NamePaths" id="P:Schematron.Assert.NamePaths" access="Public" declaringType="Schematron.Test" type="System.Xml.XPath.XPathExpression[]" contract="Normal" get="true" set="false" />
          <property name="CompiledExpression" id="P:Schematron.Assert.CompiledExpression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.Xml.XPath.XPathExpression" contract="Normal" get="true" set="false" />
          <property name="Expression" id="P:Schematron.Assert.Expression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.String" contract="Normal" get="true" set="false" />
          <method name="Finalize" id="M:Schematron.Assert.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Assert.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Assert.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Assert.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="InitializeExpression" id="M:Schematron.Assert.InitializeExpression(System.String)" access="Family" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="xpathExpression" type="System.String" />
          </method>
          <method name="GetContext" id="M:Schematron.Assert.GetContext" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Xml.XmlNamespaceManager" />
          <method name="SetContext" id="M:Schematron.Assert.SetContext(System.Xml.XmlNamespaceManager)" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="nsManager" type="System.Xml.XmlNamespaceManager" />
          </method>
          <method name="GetType" id="M:Schematron.Assert.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Assert.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="EvaluationContextBase" id="T:Schematron.EvaluationContextBase" access="Public" abstract="true">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.EvaluationContextBase.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the EvaluationContextBase class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_schema" id="F:Schematron.EvaluationContextBase._schema" access="Private" type="Schematron.Schema" />
          <field name="_source" id="F:Schematron.EvaluationContextBase._source" access="Private" type="System.Xml.XPath.XPathNavigator" />
          <field name="_messages" id="F:Schematron.EvaluationContextBase._messages" access="Private" type="System.String" />
          <field name="_showreports" id="F:Schematron.EvaluationContextBase._showreports" access="Private" type="System.Boolean" />
          <field name="_phase" id="F:Schematron.EvaluationContextBase._phase" access="Private" type="System.String" />
          <field name="_formatter" id="F:Schematron.EvaluationContextBase._formatter" access="Private" type="Schematron.Formatters.IFormatter" />
          <field name="Matched" id="F:Schematron.EvaluationContextBase.Matched" access="Family" type="Schematron.IMatchedNodes">
            <documentation>
              <summary>
            Keeps a list of nodes already matched.
            </summary>
            </documentation>
          </field>
          <property name="Formatter" id="P:Schematron.EvaluationContextBase.Formatter" access="Public" type="Schematron.Formatters.IFormatter" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Messages" id="P:Schematron.EvaluationContextBase.Messages" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Phase" id="P:Schematron.EvaluationContextBase.Phase" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Schema" id="P:Schematron.EvaluationContextBase.Schema" access="Public" type="Schematron.Schema" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="ShowReports" id="P:Schematron.EvaluationContextBase.ShowReports" access="Public" type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Source" id="P:Schematron.EvaluationContextBase.Source" access="Public" type="System.Xml.XPath.XPathNavigator" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="Start" id="M:Schematron.EvaluationContextBase.Start(System.Object)" access="Public" contract="Virtual" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="state" type="System.Object" />
          </method>
          <method name="Start" id="M:Schematron.EvaluationContextBase.Start" access="Public" contract="Abstract" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.EvaluationContextBase.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.EvaluationContextBase.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.EvaluationContextBase.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.EvaluationContextBase.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.EvaluationContextBase.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.EvaluationContextBase.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="AsyncEvaluationContext" id="T:Schematron.AsyncEvaluationContext" access="Public" baseType="EvaluationContextBase">
          <documentation>
            <summary>
            Evaluates <see cref="T:Schematron.Assert" /> and <see cref="T:Schematron.Report" /> elements asynchronously.
            </summary>
            <remarks>
            See <see cref="T:Schematron.EvaluationContextBase" /> for a description of the purpose and 
            of evaluation contexts, and where are they used.
            </remarks>
            <authorref id="dcazzulino">
            Currently this class is not working properly. We're getting thread contention
            when the <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> method is called. We have tried 
            almost every options there is to retrieve the handles. The one with the contention
            problem is the one using <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> method
            to enqueue the method execution.
            <para>
            Another approach tried (and commented in the code) is asynchronous execution of the
            evaluation method using <see cref="T:Schematron.AsyncAssertEvaluate" /> delegate. This produces
            and exception because apparently an invalid <see cref="T:System.Threading.WaitHandle" /> is returned.
            </para>
            So currently, only the <see cref="T:Schematron.SyncEvaluationContext" /> is in use.
            </authorref>
            <progress amount="70" />
          </documentation>
          <base name="EvaluationContextBase" id="T:Schematron.EvaluationContextBase" type="Schematron.EvaluationContextBase" />
          <constructor name=".ctor" id="M:Schematron.AsyncEvaluationContext.#ctor" access="Public">
            <documentation>
              <summary>Creates the evaluation context</summary>
            </documentation>
          </constructor>
          <field name="Matched" id="F:Schematron.AsyncEvaluationContext.Matched" access="Family" type="Schematron.IMatchedNodes" declaringType="Schematron.EvaluationContextBase" />
          <property name="Formatter" id="P:Schematron.AsyncEvaluationContext.Formatter" access="Public" declaringType="Schematron.EvaluationContextBase" type="Schematron.Formatters.IFormatter" contract="Normal" get="true" set="true" />
          <property name="Messages" id="P:Schematron.AsyncEvaluationContext.Messages" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.String" contract="Normal" get="true" set="true" />
          <property name="Phase" id="P:Schematron.AsyncEvaluationContext.Phase" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.String" contract="Normal" get="true" set="true" />
          <property name="Schema" id="P:Schematron.AsyncEvaluationContext.Schema" access="Public" declaringType="Schematron.EvaluationContextBase" type="Schematron.Schema" contract="Normal" get="true" set="true" />
          <property name="ShowReports" id="P:Schematron.AsyncEvaluationContext.ShowReports" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.Boolean" contract="Normal" get="true" set="true" />
          <property name="Source" id="P:Schematron.AsyncEvaluationContext.Source" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.Xml.XPath.XPathNavigator" contract="Normal" get="true" set="true" />
          <method name="Start" id="M:Schematron.AsyncEvaluationContext.Start(System.Object)" access="Public" declaringType="Schematron.EvaluationContextBase" contract="Virtual" overload="1" returnType="System.Void">
            <parameter name="state" type="System.Object" />
          </method>
          <method name="Start" id="M:Schematron.AsyncEvaluationContext.Start" access="Public" contract="Override" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Starts the evaluation process.
            </summary>
              <remarks>
            When the process is finished, the results are placed 
            in the <see cref="P:Schematron.EvaluationContextBase.Messages" /> property.
            </remarks>
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.AsyncEvaluationContext.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.AsyncEvaluationContext.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.AsyncEvaluationContext.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.AsyncEvaluationContext.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Evaluate" id="M:Schematron.AsyncEvaluationContext.Evaluate(Schematron.Phase)" access="Private" contract="Normal" overload="1" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Phase" />.
            </summary>
              <remarks>
            Processing is synchronous, as patterns must 
            me evaluated in document order.
            <para>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            </para></remarks>
              <param name="phase">The <see cref="T:Schematron.Phase" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Pattern" />, or <see cref="F:System.String.Empty" /> if there are no messages.</returns>
            </documentation>
            <parameter name="phase" type="Schematron.Phase" />
          </method>
          <method name="Evaluate" id="M:Schematron.AsyncEvaluationContext.Evaluate(Schematron.Pattern)" access="Private" contract="Normal" overload="2" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Pattern" />.
            </summary>
              <remarks>
            Processing is synchronous, as rules must me evaluated in document order.
            <para>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            </para><para>
            Clears the <see cref="F:Schematron.EvaluationContextBase.Matched" /> object before
            proceeding, as the restriction about node mathing (see <linkref id="schematron" />)
            applies only inside a single pattern.
            </para></remarks>
              <param name="pattern">The <see cref="T:Schematron.Pattern" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Rule" />, or <see cref="F:System.String.Empty" /> if there are no messages.</returns>
            </documentation>
            <parameter name="pattern" type="Schematron.Pattern" />
          </method>
          <method name="Evaluate" id="M:Schematron.AsyncEvaluationContext.Evaluate(Schematron.Rule)" access="Private" contract="Normal" overload="3" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Rule" />.
            </summary>
              <remarks>
            Here is where asynchronous becomes. <see cref="T:Schematron.Assert" /> and
            <see cref="T:Schematron.Report" /> are queued using the <see cref="T:System.Threading.ThreadPool" /> class.
            <para>
            Nodes matched by this <see cref="T:Schematron.Rule" /> are added to the <see cref="F:Schematron.EvaluationContextBase.Matched" /> list of 
            nodes to skip in the next rule, using the <see cref="M:Schematron.IMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" /> method.
            This object is a strategy object which implements different algorithms for matching and 
            saving node references, as the actual <see cref="T:System.Xml.XPath.XPathNavigator" /> implementation provides
            different methods for accessing the underlying source. 
            <para>
            This makes the implementation both performant and compliant with
            the restriction about node mathing (see <linkref id="schematron" />) in the spec.
            </para><para><seealso cref="T:Schematron.DomMatchedNodes" /><seealso cref="T:Schematron.XPathMatchedNodes" /><seealso cref="T:Schematron.GenericMatchedNodes" /></para>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            </para><para>Here is where the multithreading problems arise, which are not
            due to the schema design itself, but this specific evaluation process.
            The intent it to evaluate asserts and reports in parallel, to get the 
            most out of the CPU.
            </para></remarks>
              <param name="rule">The <see cref="T:Schematron.Rule" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Assert" /> and <see cref="T:Schematron.Report" />.</returns>
              <exception cref="T:System.InvalidOperationException">
            The rule to evaluate is abstract (see <see cref="P:Schematron.Rule.IsAbstract" />).
            </exception>
            </documentation>
            <parameter name="rule" type="Schematron.Rule" />
          </method>
          <method name="OnAssertEvaluate" id="M:Schematron.AsyncEvaluationContext.OnAssertEvaluate(System.Object,System.Boolean)" access="Private" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Asynchronous evaluation of an <see cref="T:Schematron.Assert" /></summary>
              <remarks>
            This method is used as the <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate for the 
            <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> version of the asynchonous call.
            <para>
            This just retrieves the state, casts it to <see cref="T:Schematron.AsyncEvaluationContext.AsyncAssertState" /> and executes the 
            <see cref="M:Schematron.AsyncEvaluationContext.EvaluateAssert(Schematron.Assert,System.Xml.XPath.XPathNavigator)" /> method, passing the values received. It locks on the received
            <see cref="T:System.Text.StringBuilder" /> to append the messages from evaluation.
            </para></remarks>
              <param name="state">State for the execution.</param>
              <param name="timedOut">If the <see cref="T:System.Threading.WaitHandle" /> timed out.</param>
            </documentation>
            <parameter name="state" type="System.Object" />
            <parameter name="timedOut" type="System.Boolean" />
          </method>
          <method name="OnReportEvaluate" id="M:Schematron.AsyncEvaluationContext.OnReportEvaluate(System.Object,System.Boolean)" access="Private" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Asynchronous evaluation of a <see cref="T:Schematron.Report" /></summary>
              <remarks>
            This method is used as the <see cref="T:System.Threading.WaitOrTimerCallback" /> delegate for the 
            <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> version of the asynchonous call.
            <para>
            This just retrieves the state, casts it to <see cref="T:Schematron.AsyncEvaluationContext.AsyncReportState" /> and executes the 
            <see cref="M:Schematron.AsyncEvaluationContext.EvaluateReport(Schematron.Report,System.Xml.XPath.XPathNavigator)" /> method, passing the values received. It locks on the received
            <see cref="T:System.Text.StringBuilder" /> to append the messages from evaluation.
            </para></remarks>
              <param name="state">State for the execution.</param>
              <param name="timedOut">If the <see cref="T:System.Threading.WaitHandle" /> timed out.</param>
            </documentation>
            <parameter name="state" type="System.Object" />
            <parameter name="timedOut" type="System.Boolean" />
          </method>
          <method name="EvaluateAssert" id="M:Schematron.AsyncEvaluationContext.EvaluateAssert(Schematron.Assert,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Performs the evaluation of the <see cref="T:Schematron.Assert" />.
            </summary>
              <remarks>
            This is where the actual assert expression is evaluated. 
            Is called synchonously from the <see cref="M:Schematron.AsyncEvaluationContext.OnAssertEvaluate(System.Object,System.Boolean)" /> or 
            using the <see cref="T:Schematron.AsyncAssertEvaluate" /> delegate asynchronously, with 
            BeginInvoke and EndInvoke. If the <see cref="P:Schematron.EvaluableExpression.Expression" /> 
            returns false, a formated message is generated 
            from the <see cref="P:Schematron.Test.Message" /> property.
            </remarks>
              <param name="assert">The <see cref="T:Schematron.Assert" /> to evaluate.</param>
              <param name="context">The context node for the execution.</param>
              <returns>The formatted message for a failing <see cref="T:Schematron.Assert" />, or 
            <see cref="F:System.String.Empty" />.
            </returns>
            </documentation>
            <parameter name="assert" type="Schematron.Assert" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="EvaluateReport" id="M:Schematron.AsyncEvaluationContext.EvaluateReport(Schematron.Report,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Performs the evaluation of the <see cref="T:Schematron.Report" />.
            </summary>
              <remarks>
            This is where the actual report expression is evaluated. 
            Is called synchonously from the <see cref="M:Schematron.AsyncEvaluationContext.OnReportEvaluate(System.Object,System.Boolean)" /> or 
            using the <see cref="T:Schematron.AsyncReportEvaluate" /> delegate asynchronously, with 
            BeginInvoke and EndInvoke. If
            the <see cref="P:Schematron.EvaluableExpression.Expression" /> returns true, 
            a formated message is generated from the <see cref="P:Schematron.Test.Message" /> property.
            </remarks>
              <param name="report">The <see cref="T:Schematron.Report" /> to evaluate.</param>
              <param name="context">The context node for the execution.</param>
              <returns>The formatted message for a succesful <see cref="T:Schematron.Report" />, or 
            <see cref="F:System.String.Empty" />.
            </returns>
            </documentation>
            <parameter name="report" type="Schematron.Report" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="OnAssertCompleted" id="M:Schematron.AsyncEvaluationContext.OnAssertCompleted(System.IAsyncResult)" access="Private" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Callback for asynchonous delegate execution.
            </summary>
              <remarks>
            This is the  <see cref="T:System.AsyncCallback" /> to use when executing
            asynchronously the <see cref="M:Schematron.AsyncEvaluationContext.EvaluateAssert(Schematron.Assert,System.Xml.XPath.XPathNavigator)" /> method.
            It completes the call by calling EndInvoke, retrieving the results
            and appending the messages to the <see cref="T:System.Text.StringBuilder" /> received
            in the <see cref="P:System.IAsyncResult.AsyncState" /> property.
            </remarks>
              <example>
            This in an example of the delegate creation and asynchronous execution.
            <code>AsyncAssertEvaluate eval = new AsyncAssertEvaluate(EvaluateAssert);
            eval.BeginInvoke(asr, ctx, 
            	new AsyncCallback(OnAssertCompleted), sb);
            </code></example>
              <param name="result">The object to extract state information from.</param>
            </documentation>
            <parameter name="result" type="System.IAsyncResult" />
          </method>
          <method name="OnReportCompleted" id="M:Schematron.AsyncEvaluationContext.OnReportCompleted(System.IAsyncResult)" access="Private" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
            Callback for asynchonous delegate execution.
            </summary>
              <remarks>
            This is the  <see cref="T:System.AsyncCallback" /> to use when executing
            asynchronously the <see cref="M:Schematron.AsyncEvaluationContext.EvaluateReport(Schematron.Report,System.Xml.XPath.XPathNavigator)" /> method.
            It completes the call by calling EndInvoke, retrieving the results
            and appending the messages to the <see cref="T:System.Text.StringBuilder" /> received
            in the <see cref="P:System.IAsyncResult.AsyncState" /> property.
            </remarks>
              <example>
            This in an example of the delegate creation and asynchronous execution.
            <code>AsyncReportEvaluate eval = new AsyncReportEvaluate(EvaluateReport);
            eval.BeginInvoke(rpt, ctx, new AsyncCallback(OnReportCompleted), sb);
            </code></example>
              <param name="result">The object to extract state information from.</param>
            </documentation>
            <parameter name="result" type="System.IAsyncResult" />
          </method>
          <method name="GetType" id="M:Schematron.AsyncEvaluationContext.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.AsyncEvaluationContext.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="BadSchemaException" id="T:Schematron.BadSchemaException" access="Public" baseType="ApplicationException">
          <documentation>
            <summary>
            Represents the an error in the Schematron schema.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.SerializableAttribute" />
          <base name="ApplicationException" id="T:System.ApplicationException" type="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" type="System.Exception" />
          </base>
          <implements>ISerializable</implements>
          <constructor name=".ctor" id="M:Schematron.BadSchemaException.#ctor" access="Public" overload="1">
            <documentation>
              <summary>
            Initializes a new instance of the <see cref="T:Schematron.BadSchemaException" /> class.
            </summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.BadSchemaException.#ctor(System.String)" access="Public" overload="2">
            <documentation>
              <summary>
            Initializes a new instance of the <see cref="T:Schematron.BadSchemaException" /> class.
            </summary>
              <param name="message">The error message that explains the reason for the exception.</param>
            </documentation>
            <parameter name="message" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.BadSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" overload="3">
            <documentation>
              <summary>
            Initializes a new instance of the <see cref="T:Schematron.BadSchemaException" /> class.
            </summary>
              <param name="info">Info</param>
              <param name="context">Context</param>
            </documentation>
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.BadSchemaException.#ctor(System.String,System.Exception)" access="Public" overload="4">
            <documentation>
              <summary>
            Initializes a new instance of the <see cref="T:Schematron.BadSchemaException" /> class.
            </summary>
              <param name="message">The error message that explains the reason for the exception.</param>
              <param name="innerException">The exception that is the cause of the current exception.</param>
            </documentation>
            <parameter name="message" type="System.String" />
            <parameter name="innerException" type="System.Exception" />
          </constructor>
          <field name="_message" id="F:Schematron.BadSchemaException._message" access="Assembly" type="System.String" declaringType="System.Exception" />
          <field name="_HResult" id="F:Schematron.BadSchemaException._HResult" access="Assembly" type="System.Int32" declaringType="System.Exception">
            <documentation>
              <summary>Backer for property <see cref="P:System.Exception.HResult">P:Schematron.BadSchemaException.HResult</see></summary>
            </documentation>
          </field>
          <property name="Message" id="P:Schematron.BadSchemaException.Message" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="InnerException" id="P:Schematron.BadSchemaException.InnerException" access="Public" declaringType="System.Exception" type="System.Exception" contract="Normal" get="true" set="false" />
          <property name="TargetSite" id="P:Schematron.BadSchemaException.TargetSite" access="Public" declaringType="System.Exception" type="System.Reflection.MethodBase" contract="Normal" get="true" set="false" />
          <property name="StackTrace" id="P:Schematron.BadSchemaException.StackTrace" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="HelpLink" id="P:Schematron.BadSchemaException.HelpLink" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="Source" id="P:Schematron.BadSchemaException.Source" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="HResult" id="P:Schematron.BadSchemaException.HResult" access="Family" declaringType="System.Exception" type="System.Int32" contract="Normal" get="true" set="true" />
          <method name="GetObjectData" id="M:Schematron.BadSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Void">
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </method>
          <method name="InternalToString" id="M:Schematron.BadSchemaException.InternalToString" access="Assembly" declaringType="System.Exception" contract="Virtual" returnType="System.String" />
          <method name="GetBaseException" id="M:Schematron.BadSchemaException.GetBaseException" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Exception" />
          <method name="Finalize" id="M:Schematron.BadSchemaException.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.BadSchemaException.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.BadSchemaException.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.BadSchemaException.ToString" access="Public" declaringType="System.Exception" contract="Override" returnType="System.String" />
          <method name="GetType" id="M:Schematron.BadSchemaException.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.BadSchemaException.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Class1" id="T:Schematron.Class1" access="Public" baseType="EventArgs">
          <documentation>
            <summary />
          </documentation>
          <base name="EventArgs" id="T:System.EventArgs" type="System.EventArgs" />
          <constructor name=".ctor" id="M:Schematron.Class1.#ctor" access="Public">
            <documentation>
              <summary>Changed</summary>
            </documentation>
          </constructor>
          <method name="Finalize" id="M:Schematron.Class1.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Class1.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Class1.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Class1.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Class1.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Class1.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="AnInventedExceptionNew" id="T:Schematron.AnInventedExceptionNew" access="Public" baseType="ApplicationException">
          <documentation>
            <summary />
          </documentation>
          <base name="ApplicationException" id="T:System.ApplicationException" type="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" type="System.Exception" />
          </base>
          <implements>ISerializable</implements>
          <constructor name=".ctor" id="M:Schematron.AnInventedExceptionNew.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the AnInventedExceptionNew class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_message" id="F:Schematron.AnInventedExceptionNew._message" access="Assembly" type="System.String" declaringType="System.Exception" />
          <field name="_HResult" id="F:Schematron.AnInventedExceptionNew._HResult" access="Assembly" type="System.Int32" declaringType="System.Exception">
            <documentation>
              <summary>Backer for property <see cref="P:System.Exception.HResult">P:Schematron.AnInventedExceptionNew.HResult</see></summary>
            </documentation>
          </field>
          <property name="Message" id="P:Schematron.AnInventedExceptionNew.Message" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="InnerException" id="P:Schematron.AnInventedExceptionNew.InnerException" access="Public" declaringType="System.Exception" type="System.Exception" contract="Normal" get="true" set="false" />
          <property name="TargetSite" id="P:Schematron.AnInventedExceptionNew.TargetSite" access="Public" declaringType="System.Exception" type="System.Reflection.MethodBase" contract="Normal" get="true" set="false" />
          <property name="StackTrace" id="P:Schematron.AnInventedExceptionNew.StackTrace" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="HelpLink" id="P:Schematron.AnInventedExceptionNew.HelpLink" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="Source" id="P:Schematron.AnInventedExceptionNew.Source" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="HResult" id="P:Schematron.AnInventedExceptionNew.HResult" access="Family" declaringType="System.Exception" type="System.Int32" contract="Normal" get="true" set="true" />
          <method name="GetObjectData" id="M:Schematron.AnInventedExceptionNew.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Void">
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </method>
          <method name="InternalToString" id="M:Schematron.AnInventedExceptionNew.InternalToString" access="Assembly" declaringType="System.Exception" contract="Virtual" returnType="System.String" />
          <method name="GetBaseException" id="M:Schematron.AnInventedExceptionNew.GetBaseException" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Exception" />
          <method name="Finalize" id="M:Schematron.AnInventedExceptionNew.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.AnInventedExceptionNew.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.AnInventedExceptionNew.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.AnInventedExceptionNew.ToString" access="Public" declaringType="System.Exception" contract="Override" returnType="System.String" />
          <method name="GetType" id="M:Schematron.AnInventedExceptionNew.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.AnInventedExceptionNew.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="CompiledExpressions" id="T:Schematron.CompiledExpressions" access="NotPublic">
          <documentation>
            <summary>
            This class keeps static precompiled expressions used 
            in the Schematron schema loading and validation processes.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <remarks>
            All expressions are compiled against the <see cref="P:Schematron.Config.DefaultNavigator" />
            object. All the <see cref="T:System.Xml.XPath.XPathExpression" /> objects are initialized with
            the <see cref="P:Schematron.Config.DefaultNsManager" /> for schematron and XML Schema 
            namespaces resolution.
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:Schematron.CompiledExpressions.#ctor" access="Private">
            <documentation>
              <summary>Initializes a new instance of the CompiledExpressions class.</summary>
            </documentation>
          </constructor>
          <field name="Schema" id="F:Schematron.CompiledExpressions.Schema" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="EmbeddedSchema" id="F:Schematron.CompiledExpressions.EmbeddedSchema" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="Phase" id="F:Schematron.CompiledExpressions.Phase" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="Pattern" id="F:Schematron.CompiledExpressions.Pattern" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="AbstractRule" id="F:Schematron.CompiledExpressions.AbstractRule" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="ConcreteRule" id="F:Schematron.CompiledExpressions.ConcreteRule" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="RuleExtends" id="F:Schematron.CompiledExpressions.RuleExtends" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="Assert" id="F:Schematron.CompiledExpressions.Assert" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <field name="Report" id="F:Schematron.CompiledExpressions.Report" access="Public" type="System.Xml.XPath.XPathExpression" contract="Static" />
          <method name="Finalize" id="M:Schematron.CompiledExpressions.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.CompiledExpressions.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.CompiledExpressions.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.CompiledExpressions.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.CompiledExpressions.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.CompiledExpressions.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Config" id="T:Schematron.Config" access="Public">
          <documentation>
            <summary>
            Provides global settings for Schematron validation.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <remarks>
            This class is public to allow inheritors of Schematron elements
            to use these global settings.
            </remarks>
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Config.#ctor" access="Private">
            <documentation>
              <summary>Initializes a new instance of the Config class.</summary>
            </documentation>
          </constructor>
          <field name="_formatter" id="F:Schematron.Config._formatter" access="Private" type="Schematron.Formatters.IFormatter" contract="Static" />
          <field name="_navigator" id="F:Schematron.Config._navigator" access="Private" type="System.Xml.XPath.XPathNavigator" contract="Static" />
          <field name="_nsmanager" id="F:Schematron.Config._nsmanager" access="Private" type="System.Xml.XmlNamespaceManager" contract="Static" />
          <field name="_full" id="F:Schematron.Config._full" access="Private" type="Schematron.Schema" contract="Static" />
          <field name="_embedded" id="F:Schematron.Config._embedded" access="Private" type="Schematron.Schema" contract="Static" />
          <field name="_uid" id="F:Schematron.Config._uid" access="Private" type="System.String" contract="Static" />
          <property name="DefaultFormatter" id="P:Schematron.Config.DefaultFormatter" access="Public" type="Schematron.Formatters.IFormatter" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            The default object to use to format messages from validation.
            </summary>
            </documentation>
          </property>
          <property name="DefaultNavigator" id="P:Schematron.Config.DefaultNavigator" access="Assembly" type="System.Xml.XPath.XPathNavigator" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            A default empty navigator used to pre-compile XPath expressions.
            </summary>
              <remarks>
            Compiling <see cref="T:System.Xml.XPath.XPathExpression" /> doesn't involve any namespace, 
            name table or other specific processing. It's only a parsing procedure that
            builds the abstract syntax tree for later evaluation. So we can safely
            use an empty <see cref="T:System.Xml.XPath.XPathNavigator" /> to compile them against.
            </remarks>
              <example>
                <code>expr = Config.DefaultNavigator.Compile("//sch:pattern");
            other code;
            </code>
                <para>
                  <seealso cref="T:Schematron.CompiledExpressions" />
                </para>
              </example>
            </documentation>
          </property>
          <property name="DefaultNsManager" id="P:Schematron.Config.DefaultNsManager" access="Public" type="System.Xml.XmlNamespaceManager" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            Manager to use when executing expressions that validate or
            load Schematron and Embedded Schematron schemas.
            </summary>
            </documentation>
          </property>
          <property name="FullSchematron" id="P:Schematron.Config.FullSchematron" access="Public" type="Schematron.Schema" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            A cached schema in Schematron format to validate schematron schemas.
            </summary>
              <remarks>This is the version for standalone schemas.</remarks>
            </documentation>
          </property>
          <property name="EmbeddedSchematron" id="P:Schematron.Config.EmbeddedSchematron" access="Public" type="Schematron.Schema" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            A cached schema in Schematron format to validate schematron schemas.
            </summary>
              <remarks>This is the version for embedded schemas.</remarks>
            </documentation>
          </property>
          <property name="UniqueKey" id="P:Schematron.Config.UniqueKey" access="Public" type="System.String" contract="Static" get="true" set="false">
            <documentation>
              <summary>
            A unique identifier to use for internal keys.
            </summary>
            </documentation>
          </property>
          <method name="Finalize" id="M:Schematron.Config.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Config.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Config.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Config.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Config.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Config.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="DomMatchedNodes" id="T:Schematron.DomMatchedNodes" access="NotPublic">
          <documentation>
            <summary />
          </documentation>
          <implements>IMatchedNodes</implements>
          <constructor name=".ctor" id="M:Schematron.DomMatchedNodes.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the DomMatchedNodes class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_matched" id="F:Schematron.DomMatchedNodes._matched" access="Private" type="Schematron.Int32Collection" />
          <method name="Clear" id="M:Schematron.DomMatchedNodes.Clear" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="AddMatched" id="M:Schematron.DomMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="IsMatched" id="M:Schematron.DomMatchedNodes.IsMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.DomMatchedNodes.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.DomMatchedNodes.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.DomMatchedNodes.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.DomMatchedNodes.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.DomMatchedNodes.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.DomMatchedNodes.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Driver" id="T:Schematron.Driver" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Driver.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the Driver class.</summary>
              <summary />
            </documentation>
          </constructor>
          <method name="Finalize" id="M:Schematron.Driver.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Driver.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Driver.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Driver.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Run" id="M:Schematron.Driver.Run(System.String,System.String)" access="Public" contract="Static" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="file" type="System.String" />
            <parameter name="schema" type="System.String" />
          </method>
          <method name="Run" id="M:Schematron.Driver.Run(System.String,System.String,System.String)" access="Public" contract="Static" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="file" type="System.String" />
            <parameter name="schema" type="System.String" />
            <parameter name="phase" type="System.String" />
          </method>
          <method name="Run" id="M:Schematron.Driver.Run(System.String,System.String,System.String,Schematron.Schema)" access="Public" contract="Static" overload="3" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="file" type="System.String" />
            <parameter name="schema" type="System.String" />
            <parameter name="phase" type="System.String" />
            <parameter name="customSchema" type="Schematron.Schema" />
          </method>
          <method name="OnFinished" id="M:Schematron.Driver.OnFinished(System.IAsyncResult)" access="Private" contract="Static" returnType="System.Void">
            <parameter name="result" type="System.IAsyncResult" />
          </method>
          <method name="GetType" id="M:Schematron.Driver.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Driver.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="GenericMatchedNodes" id="T:Schematron.GenericMatchedNodes" access="NotPublic">
          <documentation>
            <summary />
          </documentation>
          <implements>IMatchedNodes</implements>
          <constructor name=".ctor" id="M:Schematron.GenericMatchedNodes.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the GenericMatchedNodes class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_matched" id="F:Schematron.GenericMatchedNodes._matched" access="Private" type="System.Collections.ArrayList" />
          <method name="Clear" id="M:Schematron.GenericMatchedNodes.Clear" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="AddMatched" id="M:Schematron.GenericMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="IsMatched" id="M:Schematron.GenericMatchedNodes.IsMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.GenericMatchedNodes.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.GenericMatchedNodes.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.GenericMatchedNodes.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.GenericMatchedNodes.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.GenericMatchedNodes.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.GenericMatchedNodes.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Int32Collection" id="T:Schematron.Int32Collection" access="Public">
          <documentation>
            <summary />
          </documentation>
          <attribute name="System.SerializableAttribute" />
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <implements>IList</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.Int32Collection.#ctor" access="Public" overload="1">
            <documentation>
              <summary>Initializes a new instance of the Int32Collection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Int32Collection.#ctor(Schematron.Int32Collection)" access="Public" overload="2">
            <documentation>
              <summary />
            </documentation>
            <parameter name="collection" type="Schematron.Int32Collection" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Int32Collection.#ctor(System.Int32[])" access="Public" overload="3">
            <documentation>
              <summary />
            </documentation>
            <parameter name="array" type="System.Int32[]" />
          </constructor>
          <field name="m_array" id="F:Schematron.Int32Collection.m_array" access="Private" type="System.Int32[]" />
          <field name="m_count" id="F:Schematron.Int32Collection.m_count" access="Private" type="System.Int32" />
          <field name="m_version" id="F:Schematron.Int32Collection.m_version" access="Private" type="System.Int32" />
          <field name="DefaultMinimumCapacity" id="F:Schematron.Int32Collection.DefaultMinimumCapacity" access="Private" type="System.Int32" contract="Static" literal="true" />
          <property name="Count" id="P:Schematron.Int32Collection.Count" access="Public" type="System.Int32" contract="Final" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Item" id="P:Schematron.Int32Collection.Item(System.Int32)" access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
            <parameter name="index" type="System.Int32" />
          </property>
          <property name="Capacity" id="P:Schematron.Int32Collection.Capacity" access="Public" type="System.Int32" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="RemoveAt" id="M:Schematron.Int32Collection.RemoveAt(System.Int32)" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Clear" id="M:Schematron.Int32Collection.Clear" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="GetEnumerator" id="M:Schematron.Int32Collection.System#Collections#IEnumerable#GetEnumerator" access="Private" interface="System.Collections.IEnumerable" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="Remove" id="M:Schematron.Int32Collection.System#Collections#IList#Remove(System.Object)" access="Private" interface="System.Collections.IList" contract="Final" returnType="System.Void">
            <parameter name="item" type="System.Object" />
          </method>
          <method name="Insert" id="M:Schematron.Int32Collection.System#Collections#IList#Insert(System.Int32,System.Object)" access="Private" interface="System.Collections.IList" contract="Final" returnType="System.Void">
            <parameter name="position" type="System.Int32" />
            <parameter name="item" type="System.Object" />
          </method>
          <method name="IndexOf" id="M:Schematron.Int32Collection.System#Collections#IList#IndexOf(System.Object)" access="Private" interface="System.Collections.IList" contract="Final" returnType="System.Int32">
            <parameter name="item" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.Int32Collection.System#Collections#IList#Contains(System.Object)" access="Private" interface="System.Collections.IList" contract="Final" returnType="System.Boolean">
            <parameter name="item" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.Int32Collection.System#Collections#IList#Add(System.Object)" access="Private" interface="System.Collections.IList" contract="Final" returnType="System.Int32">
            <parameter name="item" type="System.Object" />
          </method>
          <method name="CopyTo" id="M:Schematron.Int32Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" access="Private" interface="System.Collections.ICollection" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="start" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:Schematron.Int32Collection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Int32Collection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Int32Collection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Int32Collection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="CopyTo" id="M:Schematron.Int32Collection.CopyTo(System.Int32[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="array" type="System.Int32[]" />
          </method>
          <method name="CopyTo" id="M:Schematron.Int32Collection.CopyTo(System.Int32[],System.Int32)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="array" type="System.Int32[]" />
            <parameter name="start" type="System.Int32" />
          </method>
          <method name="Add" id="M:Schematron.Int32Collection.Add(System.Int32)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="item" type="System.Int32" />
          </method>
          <method name="Contains" id="M:Schematron.Int32Collection.Contains(System.Int32)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
            <parameter name="item" type="System.Int32" />
          </method>
          <method name="IndexOf" id="M:Schematron.Int32Collection.IndexOf(System.Int32)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="item" type="System.Int32" />
          </method>
          <method name="Insert" id="M:Schematron.Int32Collection.Insert(System.Int32,System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="position" type="System.Int32" />
            <parameter name="item" type="System.Int32" />
          </method>
          <method name="Remove" id="M:Schematron.Int32Collection.Remove(System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="item" type="System.Int32" />
          </method>
          <method name="GetEnumerator" id="M:Schematron.Int32Collection.GetEnumerator" access="Public" contract="Normal" returnType="Schematron.Int32Collection.Enumerator">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="AddRange" id="M:Schematron.Int32Collection.AddRange(Schematron.Int32Collection)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="collection" type="Schematron.Int32Collection" />
          </method>
          <method name="AddRange" id="M:Schematron.Int32Collection.AddRange(System.Int32[])" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="array" type="System.Int32[]" />
          </method>
          <method name="ValidateIndex" id="M:Schematron.Int32Collection.ValidateIndex(System.Int32)" access="Private" contract="Normal" overload="1" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="ValidateIndex" id="M:Schematron.Int32Collection.ValidateIndex(System.Int32,System.Boolean)" access="Private" contract="Normal" overload="2" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="allowEqualEnd" type="System.Boolean" />
          </method>
          <method name="NeedsGrowth" id="M:Schematron.Int32Collection.NeedsGrowth" access="Private" contract="Normal" returnType="System.Boolean" />
          <method name="Grow" id="M:Schematron.Int32Collection.Grow" access="Private" contract="Normal" returnType="System.Void" />
          <method name="NeedsTrimming" id="M:Schematron.Int32Collection.NeedsTrimming" access="Private" contract="Normal" returnType="System.Boolean" />
          <method name="Trim" id="M:Schematron.Int32Collection.Trim" access="Private" contract="Normal" returnType="System.Void" />
          <method name="GetType" id="M:Schematron.Int32Collection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Int32Collection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Int32Collection.Enumerator" id="T:Schematron.Int32Collection.Enumerator" access="NestedPublic">
          <documentation>
            <summary />
          </documentation>
          <implements>IEnumerator</implements>
          <constructor name=".ctor" id="M:Schematron.Int32Collection.Enumerator.#ctor(Schematron.Int32Collection)" access="Public">
            <documentation>
              <summary />
            </documentation>
            <parameter name="tc" type="Schematron.Int32Collection" />
          </constructor>
          <field name="m_collection" id="F:Schematron.Int32Collection.Enumerator.m_collection" access="Private" type="Schematron.Int32Collection" />
          <field name="m_index" id="F:Schematron.Int32Collection.Enumerator.m_index" access="Private" type="System.Int32" />
          <field name="m_version" id="F:Schematron.Int32Collection.Enumerator.m_version" access="Private" type="System.Int32" />
          <property name="Current" id="P:Schematron.Int32Collection.Enumerator.Current" access="Public" type="System.Int32" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="Reset" id="M:Schematron.Int32Collection.Enumerator.Reset" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="MoveNext" id="M:Schematron.Int32Collection.Enumerator.MoveNext" access="Public" contract="Final" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.Int32Collection.Enumerator.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Int32Collection.Enumerator.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Int32Collection.Enumerator.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Int32Collection.Enumerator.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Int32Collection.Enumerator.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Int32Collection.Enumerator.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="InvalidExpressionException" id="T:Schematron.InvalidExpressionException" access="Public" baseType="ApplicationException">
          <documentation>
            <summary>
            The exception that is thrown when an invalid XPath expression is used.
            </summary>
          </documentation>
          <base name="ApplicationException" id="T:System.ApplicationException" type="System.ApplicationException">
            <base name="Exception" id="T:System.Exception" type="System.Exception" />
          </base>
          <implements>ISerializable</implements>
          <constructor name=".ctor" id="M:Schematron.InvalidExpressionException.#ctor" access="Public" overload="1">
            <documentation>
              <summary>Initializes a new instance of the InvalidExpressionException class.</summary>
              <summary>
              </summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.InvalidExpressionException.#ctor(System.String)" access="Public" overload="2">
            <documentation>
              <summary>
              </summary>
              <param name="message">
              </param>
            </documentation>
            <parameter name="message" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Family" overload="3">
            <documentation>
              <summary>
              </summary>
              <param name="info">
              </param>
              <param name="context">
              </param>
            </documentation>
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.InvalidExpressionException.#ctor(System.String,System.Exception)" access="Public" overload="4">
            <documentation>
              <summary>
              </summary>
              <param name="message">
              </param>
              <param name="innerException">
              </param>
            </documentation>
            <parameter name="message" type="System.String" />
            <parameter name="innerException" type="System.Exception" />
          </constructor>
          <field name="_message" id="F:Schematron.InvalidExpressionException._message" access="Assembly" type="System.String" declaringType="System.Exception" />
          <field name="_HResult" id="F:Schematron.InvalidExpressionException._HResult" access="Assembly" type="System.Int32" declaringType="System.Exception">
            <documentation>
              <summary>Backer for property <see cref="P:System.Exception.HResult">P:Schematron.InvalidExpressionException.HResult</see></summary>
            </documentation>
          </field>
          <property name="Message" id="P:Schematron.InvalidExpressionException.Message" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="InnerException" id="P:Schematron.InvalidExpressionException.InnerException" access="Public" declaringType="System.Exception" type="System.Exception" contract="Normal" get="true" set="false" />
          <property name="TargetSite" id="P:Schematron.InvalidExpressionException.TargetSite" access="Public" declaringType="System.Exception" type="System.Reflection.MethodBase" contract="Normal" get="true" set="false" />
          <property name="StackTrace" id="P:Schematron.InvalidExpressionException.StackTrace" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="false" />
          <property name="HelpLink" id="P:Schematron.InvalidExpressionException.HelpLink" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="Source" id="P:Schematron.InvalidExpressionException.Source" access="Public" declaringType="System.Exception" type="System.String" contract="Virtual" get="true" set="true" />
          <property name="HResult" id="P:Schematron.InvalidExpressionException.HResult" access="Family" declaringType="System.Exception" type="System.Int32" contract="Normal" get="true" set="true" />
          <method name="GetObjectData" id="M:Schematron.InvalidExpressionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Void">
            <parameter name="info" type="System.Runtime.Serialization.SerializationInfo" />
            <parameter name="context" type="System.Runtime.Serialization.StreamingContext" />
          </method>
          <method name="InternalToString" id="M:Schematron.InvalidExpressionException.InternalToString" access="Assembly" declaringType="System.Exception" contract="Virtual" returnType="System.String" />
          <method name="GetBaseException" id="M:Schematron.InvalidExpressionException.GetBaseException" access="Public" declaringType="System.Exception" contract="Virtual" returnType="System.Exception" />
          <method name="Finalize" id="M:Schematron.InvalidExpressionException.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.InvalidExpressionException.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.InvalidExpressionException.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.InvalidExpressionException.ToString" access="Public" declaringType="System.Exception" contract="Override" returnType="System.String" />
          <method name="GetType" id="M:Schematron.InvalidExpressionException.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.InvalidExpressionException.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Pattern" id="T:Schematron.Pattern" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Pattern.#ctor(System.String)" access="FamilyOrAssembly" overload="1">
            <documentation>
              <summary />
            </documentation>
            <parameter name="name" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Pattern.#ctor(System.String,System.String)" access="FamilyOrAssembly" overload="2">
            <documentation>
              <summary />
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="id" type="System.String" />
          </constructor>
          <field name="_name" id="F:Schematron.Pattern._name" access="Private" type="System.String" />
          <field name="_id" id="F:Schematron.Pattern._id" access="Private" type="System.String" />
          <field name="_rules" id="F:Schematron.Pattern._rules" access="Private" type="Schematron.RuleCollection" />
          <property name="Name" id="P:Schematron.Pattern.Name" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Id" id="P:Schematron.Pattern.Id" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Rules" id="P:Schematron.Pattern.Rules" access="Public" type="Schematron.RuleCollection" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="CreateRule" id="M:Schematron.Pattern.CreateRule(System.String)" access="Public" contract="Virtual" overload="1" returnType="Schematron.Rule">
            <documentation>
              <summary />
            </documentation>
            <parameter name="context" type="System.String" />
          </method>
          <method name="CreateRule" id="M:Schematron.Pattern.CreateRule" access="Public" contract="Virtual" overload="2" returnType="Schematron.Rule">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.Pattern.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Pattern.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Pattern.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Pattern.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Pattern.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Pattern.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="PatternCollection" id="T:Schematron.PatternCollection" access="Public" baseType="CollectionBase">
          <documentation>
            <summary>A collection of Pattern elements.</summary>
            <author ref="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" type="System.Collections.CollectionBase" />
          <implements>IList</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.PatternCollection.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the PatternCollection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <property name="Item" id="P:Schematron.PatternCollection.Item(System.Int32)" access="Public" type="Schematron.Pattern" contract="Normal" get="true" set="true">
            <documentation>
              <summary>Returns the Pattern element at the specified position.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </property>
          <property name="InnerList" id="P:Schematron.PatternCollection.InnerList" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.ArrayList" contract="Normal" get="true" set="false" />
          <property name="List" id="P:Schematron.PatternCollection.List" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.IList" contract="Normal" get="true" set="false" />
          <property name="Count" id="P:Schematron.PatternCollection.Count" access="Public" declaringType="System.Collections.CollectionBase" type="System.Int32" contract="Final" get="true" set="false" />
          <method name="GetEnumerator" id="M:Schematron.PatternCollection.GetEnumerator" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="RemoveAt" id="M:Schematron.PatternCollection.RemoveAt(System.Int32)" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Clear" id="M:Schematron.PatternCollection.Clear" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void" />
          <method name="OnRemoveComplete" id="M:Schematron.PatternCollection.OnRemoveComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClearComplete" id="M:Schematron.PatternCollection.OnClearComplete" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsertComplete" id="M:Schematron.PatternCollection.OnInsertComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSetComplete" id="M:Schematron.PatternCollection.OnSetComplete(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnValidate" id="M:Schematron.PatternCollection.OnValidate(System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnRemove" id="M:Schematron.PatternCollection.OnRemove(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClear" id="M:Schematron.PatternCollection.OnClear" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsert" id="M:Schematron.PatternCollection.OnInsert(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSet" id="M:Schematron.PatternCollection.OnSet(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="Insert" id="M:Schematron.PatternCollection.System#Collections#IList#Insert(System.Int32,System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="IndexOf" id="M:Schematron.PatternCollection.System#Collections#IList#IndexOf(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Remove" id="M:Schematron.PatternCollection.System#Collections#IList#Remove(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.PatternCollection.System#Collections#IList#Add(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.PatternCollection.System#Collections#IList#Contains(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Boolean">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="CopyTo" id="M:Schematron.PatternCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" access="Private" interface="System.Collections.ICollection" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:Schematron.PatternCollection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.PatternCollection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.PatternCollection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.PatternCollection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Add" id="M:Schematron.PatternCollection.Add(Schematron.Pattern)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="value" type="Schematron.Pattern" />
          </method>
          <method name="AddRange" id="M:Schematron.PatternCollection.AddRange(Schematron.Pattern[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.Pattern[]" />
          </method>
          <method name="AddRange" id="M:Schematron.PatternCollection.AddRange(Schematron.PatternCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.PatternCollection" />
          </method>
          <method name="Contains" id="M:Schematron.PatternCollection.Contains(Schematron.Pattern)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Pattern" />
          </method>
          <method name="CopyTo" id="M:Schematron.PatternCollection.CopyTo(Schematron.Pattern[],System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="array" type="Schematron.Pattern[]" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="IndexOf" id="M:Schematron.PatternCollection.IndexOf(Schematron.Pattern)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Pattern" />
          </method>
          <method name="Insert" id="M:Schematron.PatternCollection.Insert(System.Int32,Schematron.Pattern)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="Schematron.Pattern" />
          </method>
          <method name="Remove" id="M:Schematron.PatternCollection.Remove(Schematron.Pattern)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Pattern" />
          </method>
          <method name="GetType" id="M:Schematron.PatternCollection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.PatternCollection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Phase" id="T:Schematron.Phase" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Phase.#ctor(System.String)" access="FamilyOrAssembly" overload="1">
            <documentation>
              <summary />
            </documentation>
            <parameter name="id" type="System.String" />
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Phase.#ctor" access="FamilyOrAssembly" overload="2">
            <documentation>
              <summary>Initializes a new instance of the Phase class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_id" id="F:Schematron.Phase._id" access="Private" type="System.String" />
          <field name="_patterns" id="F:Schematron.Phase._patterns" access="Private" type="Schematron.PatternCollection" />
          <field name="All" id="F:Schematron.Phase.All" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>
            The identifier to check for All phases.
            </summary>
              <remarks>Causes all the patterns in a schema to be checked, 
            irrespective of the phases where they are activated.</remarks>
            </documentation>
          </field>
          <property name="Id" id="P:Schematron.Phase.Id" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Patterns" id="P:Schematron.Phase.Patterns" access="Public" type="Schematron.PatternCollection" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="CreatePattern" id="M:Schematron.Phase.CreatePattern(System.String)" access="Public" contract="Virtual" overload="1" returnType="Schematron.Pattern">
            <documentation>
              <summary />
              <param name="name">
              </param>
            </documentation>
            <parameter name="name" type="System.String" />
          </method>
          <method name="CreatePattern" id="M:Schematron.Phase.CreatePattern(System.String,System.String)" access="Public" contract="Virtual" overload="2" returnType="Schematron.Pattern">
            <documentation>
              <summary />
              <param name="name">
              </param>
              <param name="id">
              </param>
            </documentation>
            <parameter name="name" type="System.String" />
            <parameter name="id" type="System.String" />
          </method>
          <method name="Finalize" id="M:Schematron.Phase.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Phase.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Phase.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Phase.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.Phase.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Phase.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="PhaseCollection" id="T:Schematron.PhaseCollection" access="Public" baseType="DictionaryBase">
          <documentation>
            <summary>A collection of Phase elements</summary>
            <author ref="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <base name="DictionaryBase" id="T:System.Collections.DictionaryBase" type="System.Collections.DictionaryBase" />
          <implements>IDictionary</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.PhaseCollection.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the PhaseCollection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <property name="Item" id="P:Schematron.PhaseCollection.Item(System.String)" access="Public" type="Schematron.Phase" contract="Normal" get="true" set="true">
            <documentation>
              <summary>Required indexer.</summary>
            </documentation>
            <parameter name="key" type="System.String" />
          </property>
          <property name="InnerHashtable" id="P:Schematron.PhaseCollection.InnerHashtable" access="Family" declaringType="System.Collections.DictionaryBase" type="System.Collections.Hashtable" contract="Normal" get="true" set="false" />
          <property name="Dictionary" id="P:Schematron.PhaseCollection.Dictionary" access="Family" declaringType="System.Collections.DictionaryBase" type="System.Collections.IDictionary" contract="Normal" get="true" set="false" />
          <property name="Count" id="P:Schematron.PhaseCollection.Count" access="Public" declaringType="System.Collections.DictionaryBase" type="System.Int32" contract="Final" get="true" set="false" />
          <method name="CopyTo" id="M:Schematron.PhaseCollection.CopyTo(System.Array,System.Int32)" access="Public" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="GetEnumerator" id="M:Schematron.PhaseCollection.GetEnumerator" access="Public" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Collections.IDictionaryEnumerator" />
          <method name="Clear" id="M:Schematron.PhaseCollection.Clear" access="Public" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Void" />
          <method name="OnRemoveComplete" id="M:Schematron.PhaseCollection.OnRemoveComplete(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClearComplete" id="M:Schematron.PhaseCollection.OnClearComplete" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsertComplete" id="M:Schematron.PhaseCollection.OnInsertComplete(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSetComplete" id="M:Schematron.PhaseCollection.OnSetComplete(System.Object,System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnValidate" id="M:Schematron.PhaseCollection.OnValidate(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnRemove" id="M:Schematron.PhaseCollection.OnRemove(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClear" id="M:Schematron.PhaseCollection.OnClear" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsert" id="M:Schematron.PhaseCollection.OnInsert(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSet" id="M:Schematron.PhaseCollection.OnSet(System.Object,System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnGet" id="M:Schematron.PhaseCollection.OnGet(System.Object,System.Object)" access="Family" declaringType="System.Collections.DictionaryBase" contract="Virtual" returnType="System.Object">
            <parameter name="key" type="System.Object" />
            <parameter name="currentValue" type="System.Object" />
          </method>
          <method name="GetEnumerator" id="M:Schematron.PhaseCollection.System#Collections#IEnumerable#GetEnumerator" access="Private" interface="System.Collections.IEnumerable" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="Remove" id="M:Schematron.PhaseCollection.System#Collections#IDictionary#Remove(System.Object)" access="Private" interface="System.Collections.IDictionary" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Void">
            <parameter name="key" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.PhaseCollection.System#Collections#IDictionary#Add(System.Object,System.Object)" access="Private" interface="System.Collections.IDictionary" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Void">
            <parameter name="key" type="System.Object" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.PhaseCollection.System#Collections#IDictionary#Contains(System.Object)" access="Private" interface="System.Collections.IDictionary" declaringType="System.Collections.DictionaryBase" contract="Final" returnType="System.Boolean">
            <parameter name="key" type="System.Object" />
          </method>
          <method name="Finalize" id="M:Schematron.PhaseCollection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.PhaseCollection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.PhaseCollection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.PhaseCollection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Add" id="M:Schematron.PhaseCollection.Add(Schematron.Phase)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Phase" />
          </method>
          <method name="AddRange" id="M:Schematron.PhaseCollection.AddRange(Schematron.Phase[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="values" type="Schematron.Phase[]" />
          </method>
          <method name="AddRange" id="M:Schematron.PhaseCollection.AddRange(Schematron.PhaseCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="values" type="Schematron.PhaseCollection" />
          </method>
          <method name="Contains" id="M:Schematron.PhaseCollection.Contains(System.String)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="key" type="System.String" />
          </method>
          <method name="Remove" id="M:Schematron.PhaseCollection.Remove(Schematron.Phase)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Phase" />
          </method>
          <method name="GetType" id="M:Schematron.PhaseCollection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.PhaseCollection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Report" id="T:Schematron.Report" access="Public" baseType="Test">
          <documentation>
            <summary>
            Performs reports using XPath expressions.
            </summary>
          </documentation>
          <base name="Test" id="T:Schematron.Test" type="Schematron.Test">
            <base name="EvaluableExpression" id="T:Schematron.EvaluableExpression" type="Schematron.EvaluableExpression" />
          </base>
          <constructor name=".ctor" id="M:Schematron.Report.#ctor(System.String,System.String)" access="FamilyOrAssembly">
            <documentation>
              <summary />
              <param name="test">
              </param>
              <param name="message">
              </param>
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </constructor>
          <field name="_msg" id="F:Schematron.Report._msg" access="Family" type="System.String" declaringType="Schematron.Test" />
          <field name="_names" id="F:Schematron.Report._names" access="Family" type="System.Text.RegularExpressions.MatchCollection" declaringType="Schematron.Test" />
          <field name="_paths" id="F:Schematron.Report._paths" access="Family" type="System.Xml.XPath.XPathExpression[]" declaringType="Schematron.Test" />
          <field name="_xpath" id="F:Schematron.Report._xpath" access="Family" type="System.String" declaringType="Schematron.EvaluableExpression" />
          <field name="_expr" id="F:Schematron.Report._expr" access="Family" type="System.Xml.XPath.XPathExpression" declaringType="Schematron.EvaluableExpression" />
          <property name="Message" id="P:Schematron.Report.Message" access="Public" declaringType="Schematron.Test" type="System.String" contract="Normal" get="true" set="true" />
          <property name="NameExpressions" id="P:Schematron.Report.NameExpressions" access="Public" declaringType="Schematron.Test" type="System.Text.RegularExpressions.MatchCollection" contract="Normal" get="true" set="false" />
          <property name="NamePaths" id="P:Schematron.Report.NamePaths" access="Public" declaringType="Schematron.Test" type="System.Xml.XPath.XPathExpression[]" contract="Normal" get="true" set="false" />
          <property name="CompiledExpression" id="P:Schematron.Report.CompiledExpression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.Xml.XPath.XPathExpression" contract="Normal" get="true" set="false" />
          <property name="Expression" id="P:Schematron.Report.Expression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.String" contract="Normal" get="true" set="false" />
          <method name="Finalize" id="M:Schematron.Report.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Report.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Report.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Report.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="InitializeExpression" id="M:Schematron.Report.InitializeExpression(System.String)" access="Family" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="xpathExpression" type="System.String" />
          </method>
          <method name="GetContext" id="M:Schematron.Report.GetContext" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Xml.XmlNamespaceManager" />
          <method name="SetContext" id="M:Schematron.Report.SetContext(System.Xml.XmlNamespaceManager)" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="nsManager" type="System.Xml.XmlNamespaceManager" />
          </method>
          <method name="GetType" id="M:Schematron.Report.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Report.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Rule" id="T:Schematron.Rule" access="Public" baseType="EvaluableExpression">
          <documentation>
            <summary />
            TODO: add support to <key></key> child elements.
            <progress amount="90">Lacks support for key elements in schematron.</progress></documentation>
          <base name="EvaluableExpression" id="T:Schematron.EvaluableExpression" type="Schematron.EvaluableExpression" />
          <constructor name=".ctor" id="M:Schematron.Rule.#ctor" access="FamilyOrAssembly" overload="1">
            <documentation>
              <summary>
            Creates an abstract rule, without context.
            </summary>
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Rule.#ctor(System.String)" access="FamilyOrAssembly" overload="2">
            <documentation>
              <summary />
              <param name="context">
              </param>
              <remarks>If passed a null or empty string, this is implicitly an abstract rule.</remarks>
            </documentation>
            <parameter name="context" type="System.String" />
          </constructor>
          <field name="_asserts" id="F:Schematron.Rule._asserts" access="Family" type="Schematron.TestCollection">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_reports" id="F:Schematron.Rule._reports" access="Family" type="Schematron.TestCollection">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="_id" id="F:Schematron.Rule._id" access="Private" type="System.String" />
          <field name="_xpath" id="F:Schematron.Rule._xpath" access="Family" type="System.String" declaringType="Schematron.EvaluableExpression" />
          <field name="_expr" id="F:Schematron.Rule._expr" access="Family" type="System.Xml.XPath.XPathExpression" declaringType="Schematron.EvaluableExpression" />
          <property name="Id" id="P:Schematron.Rule.Id" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Context" id="P:Schematron.Rule.Context" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="IsAbstract" id="P:Schematron.Rule.IsAbstract" access="Public" type="System.Boolean" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Asserts" id="P:Schematron.Rule.Asserts" access="Public" type="Schematron.TestCollection" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Reports" id="P:Schematron.Rule.Reports" access="Public" type="Schematron.TestCollection" contract="Normal" get="true" set="false">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="CompiledExpression" id="P:Schematron.Rule.CompiledExpression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.Xml.XPath.XPathExpression" contract="Normal" get="true" set="false" />
          <property name="Expression" id="P:Schematron.Rule.Expression" access="Public" declaringType="Schematron.EvaluableExpression" type="System.String" contract="Normal" get="true" set="false" />
          <method name="CreateReport" id="M:Schematron.Rule.CreateReport(System.String,System.String)" access="Public" contract="Virtual" returnType="Schematron.Report">
            <documentation>
              <summary />
              <param name="test">
              </param>
              <param name="message">
              </param>
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="CreateAssert" id="M:Schematron.Rule.CreateAssert(System.String,System.String)" access="Public" contract="Virtual" returnType="Schematron.Assert">
            <documentation>
              <summary />
              <param name="test">
              </param>
              <param name="message">
              </param>
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="Finalize" id="M:Schematron.Rule.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Rule.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Rule.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Rule.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="InitContext" id="M:Schematron.Rule.InitContext(System.String)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="context" type="System.String" />
          </method>
          <method name="AddAssert" id="M:Schematron.Rule.AddAssert(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="AddReport" id="M:Schematron.Rule.AddReport(System.String,System.String)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="test" type="System.String" />
            <parameter name="message" type="System.String" />
          </method>
          <method name="Extend" id="M:Schematron.Rule.Extend(Schematron.Rule)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary />
              <param name="parent">
              </param>
              <exception cref="T:System.InvalidOperationException">Only abstract rules can be used as a base for extensions.</exception>
            </documentation>
            <parameter name="parent" type="Schematron.Rule" />
          </method>
          <method name="InitializeExpression" id="M:Schematron.Rule.InitializeExpression(System.String)" access="Family" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="xpathExpression" type="System.String" />
          </method>
          <method name="GetContext" id="M:Schematron.Rule.GetContext" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Xml.XmlNamespaceManager" />
          <method name="SetContext" id="M:Schematron.Rule.SetContext(System.Xml.XmlNamespaceManager)" access="Public" declaringType="Schematron.EvaluableExpression" contract="Normal" returnType="System.Void">
            <parameter name="nsManager" type="System.Xml.XmlNamespaceManager" />
          </method>
          <method name="GetType" id="M:Schematron.Rule.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Rule.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="RuleCollection" id="T:Schematron.RuleCollection" access="Public" baseType="CollectionBase">
          <documentation>
            <summary>A collection of Rule elements.</summary>
            <author ref="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" type="System.Collections.CollectionBase" />
          <implements>IList</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.RuleCollection.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the RuleCollection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <property name="Item" id="P:Schematron.RuleCollection.Item(System.Int32)" access="Public" type="Schematron.Rule" contract="Normal" get="true" set="true">
            <documentation>
              <summary>Returns the Rule element at the specified position.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </property>
          <property name="InnerList" id="P:Schematron.RuleCollection.InnerList" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.ArrayList" contract="Normal" get="true" set="false" />
          <property name="List" id="P:Schematron.RuleCollection.List" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.IList" contract="Normal" get="true" set="false" />
          <property name="Count" id="P:Schematron.RuleCollection.Count" access="Public" declaringType="System.Collections.CollectionBase" type="System.Int32" contract="Final" get="true" set="false" />
          <method name="GetEnumerator" id="M:Schematron.RuleCollection.GetEnumerator" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="RemoveAt" id="M:Schematron.RuleCollection.RemoveAt(System.Int32)" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Clear" id="M:Schematron.RuleCollection.Clear" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void" />
          <method name="OnRemoveComplete" id="M:Schematron.RuleCollection.OnRemoveComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClearComplete" id="M:Schematron.RuleCollection.OnClearComplete" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsertComplete" id="M:Schematron.RuleCollection.OnInsertComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSetComplete" id="M:Schematron.RuleCollection.OnSetComplete(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnValidate" id="M:Schematron.RuleCollection.OnValidate(System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnRemove" id="M:Schematron.RuleCollection.OnRemove(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClear" id="M:Schematron.RuleCollection.OnClear" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsert" id="M:Schematron.RuleCollection.OnInsert(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSet" id="M:Schematron.RuleCollection.OnSet(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="Insert" id="M:Schematron.RuleCollection.System#Collections#IList#Insert(System.Int32,System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="IndexOf" id="M:Schematron.RuleCollection.System#Collections#IList#IndexOf(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Remove" id="M:Schematron.RuleCollection.System#Collections#IList#Remove(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.RuleCollection.System#Collections#IList#Add(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.RuleCollection.System#Collections#IList#Contains(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Boolean">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="CopyTo" id="M:Schematron.RuleCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" access="Private" interface="System.Collections.ICollection" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:Schematron.RuleCollection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.RuleCollection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.RuleCollection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.RuleCollection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Add" id="M:Schematron.RuleCollection.Add(Schematron.Rule)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="value" type="Schematron.Rule" />
          </method>
          <method name="AddRange" id="M:Schematron.RuleCollection.AddRange(Schematron.Rule[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.Rule[]" />
          </method>
          <method name="AddRange" id="M:Schematron.RuleCollection.AddRange(Schematron.RuleCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.RuleCollection" />
          </method>
          <method name="Contains" id="M:Schematron.RuleCollection.Contains(Schematron.Rule)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Rule" />
          </method>
          <method name="CopyTo" id="M:Schematron.RuleCollection.CopyTo(Schematron.Rule[],System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="array" type="Schematron.Rule[]" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="IndexOf" id="M:Schematron.RuleCollection.IndexOf(Schematron.Rule)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Rule" />
          </method>
          <method name="Insert" id="M:Schematron.RuleCollection.Insert(System.Int32,Schematron.Rule)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="Schematron.Rule" />
          </method>
          <method name="Remove" id="M:Schematron.RuleCollection.Remove(Schematron.Rule)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Rule" />
          </method>
          <method name="GetType" id="M:Schematron.RuleCollection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.RuleCollection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Schema" id="T:Schematron.Schema" access="Public">
          <documentation>
            <summary>
            </summary>
            <author ref="dcazzulino" />
            <progress amount="100">Lacks attributes defined in Schematron, but not in use currently.</progress>
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Schema.#ctor" access="Public" overload="1">
            <documentation>
              <summary>Initializes a new instance of the Schema class.</summary>
              <summary />
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Schema.#ctor(System.String)" access="Public" overload="2">
            <documentation>
              <summary />
            </documentation>
            <parameter name="title" type="System.String" />
          </constructor>
          <field name="_loader" id="F:Schematron.Schema._loader" access="Private" type="Schematron.SchemaLoader" />
          <field name="_title" id="F:Schematron.Schema._title" access="Private" type="System.String" />
          <field name="_defaultphase" id="F:Schematron.Schema._defaultphase" access="Private" type="System.String" />
          <field name="_phases" id="F:Schematron.Schema._phases" access="Private" type="Schematron.PhaseCollection" />
          <field name="_patterns" id="F:Schematron.Schema._patterns" access="Private" type="Schematron.PatternCollection" />
          <field name="_ns" id="F:Schematron.Schema._ns" access="Private" type="System.Xml.XmlNamespaceManager" />
          <field name="Namespace" id="F:Schematron.Schema.Namespace" access="Public" type="System.String" contract="Static" literal="true">
            <documentation>
              <summary>
            The Schematron namespace.
            </summary>
            </documentation>
          </field>
          <property name="Loader" id="P:Schematron.Schema.Loader" access="Public" type="Schematron.SchemaLoader" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="DefaultPhase" id="P:Schematron.Schema.DefaultPhase" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Title" id="P:Schematron.Schema.Title" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Phases" id="P:Schematron.Schema.Phases" access="Public" type="Schematron.PhaseCollection" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Patterns" id="P:Schematron.Schema.Patterns" access="Public" type="Schematron.PatternCollection" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="NsManager" id="P:Schematron.Schema.NsManager" access="Public" type="System.Xml.XmlNamespaceManager" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="CreatePhase" id="M:Schematron.Schema.CreatePhase" access="Public" contract="Virtual" overload="1" returnType="Schematron.Phase">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="CreatePhase" id="M:Schematron.Schema.CreatePhase(System.String)" access="Public" contract="Virtual" overload="2" returnType="Schematron.Phase">
            <documentation>
              <summary />
            </documentation>
            <parameter name="id" type="System.String" />
          </method>
          <method name="CreateLoader" id="M:Schematron.Schema.CreateLoader" access="FamilyOrAssembly" contract="Virtual" returnType="Schematron.SchemaLoader">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.Schema.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Schema.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Schema.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Schema.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Load" id="M:Schematron.Schema.Load(System.String)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="uri" type="System.String" />
          </method>
          <method name="Load" id="M:Schematron.Schema.Load(System.IO.TextReader)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.IO.TextReader" />
          </method>
          <method name="Load" id="M:Schematron.Schema.Load(System.IO.Stream)" access="Public" contract="Normal" overload="3" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="input" type="System.IO.Stream" />
          </method>
          <method name="Load" id="M:Schematron.Schema.Load(System.Xml.XmlReader)" access="Public" contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schema" type="System.Xml.XmlReader" />
          </method>
          <method name="Load" id="M:Schematron.Schema.Load(System.Xml.XPath.XPathNavigator)" access="Public" contract="Normal" overload="5" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schema" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="GetType" id="M:Schematron.Schema.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Schema.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="SchemaCollection" id="T:Schematron.SchemaCollection" access="Public" baseType="CollectionBase">
          <documentation>
            <summary>A collection of schematron schemas.</summary>
            <author ref="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" type="System.Collections.CollectionBase" />
          <implements>IList</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.SchemaCollection.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the SchemaCollection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <property name="Item" id="P:Schematron.SchemaCollection.Item(System.Int32)" access="Public" type="Schematron.Schema" contract="Normal" get="true" set="true">
            <documentation>
              <summary>Returns the Schema element at the specified position.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </property>
          <property name="InnerList" id="P:Schematron.SchemaCollection.InnerList" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.ArrayList" contract="Normal" get="true" set="false" />
          <property name="List" id="P:Schematron.SchemaCollection.List" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.IList" contract="Normal" get="true" set="false" />
          <property name="Count" id="P:Schematron.SchemaCollection.Count" access="Public" declaringType="System.Collections.CollectionBase" type="System.Int32" contract="Final" get="true" set="false" />
          <method name="GetEnumerator" id="M:Schematron.SchemaCollection.GetEnumerator" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="RemoveAt" id="M:Schematron.SchemaCollection.RemoveAt(System.Int32)" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Clear" id="M:Schematron.SchemaCollection.Clear" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void" />
          <method name="OnRemoveComplete" id="M:Schematron.SchemaCollection.OnRemoveComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClearComplete" id="M:Schematron.SchemaCollection.OnClearComplete" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsertComplete" id="M:Schematron.SchemaCollection.OnInsertComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSetComplete" id="M:Schematron.SchemaCollection.OnSetComplete(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnValidate" id="M:Schematron.SchemaCollection.OnValidate(System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnRemove" id="M:Schematron.SchemaCollection.OnRemove(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClear" id="M:Schematron.SchemaCollection.OnClear" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsert" id="M:Schematron.SchemaCollection.OnInsert(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSet" id="M:Schematron.SchemaCollection.OnSet(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="Insert" id="M:Schematron.SchemaCollection.System#Collections#IList#Insert(System.Int32,System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="IndexOf" id="M:Schematron.SchemaCollection.System#Collections#IList#IndexOf(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Remove" id="M:Schematron.SchemaCollection.System#Collections#IList#Remove(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.SchemaCollection.System#Collections#IList#Add(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.SchemaCollection.System#Collections#IList#Contains(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Boolean">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="CopyTo" id="M:Schematron.SchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" access="Private" interface="System.Collections.ICollection" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:Schematron.SchemaCollection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.SchemaCollection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.SchemaCollection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.SchemaCollection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Add" id="M:Schematron.SchemaCollection.Add(Schematron.Schema)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="value" type="Schematron.Schema" />
          </method>
          <method name="AddRange" id="M:Schematron.SchemaCollection.AddRange(Schematron.Schema[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.Schema[]" />
          </method>
          <method name="AddRange" id="M:Schematron.SchemaCollection.AddRange(Schematron.SchemaCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.SchemaCollection" />
          </method>
          <method name="Contains" id="M:Schematron.SchemaCollection.Contains(Schematron.Schema)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Schema" />
          </method>
          <method name="CopyTo" id="M:Schematron.SchemaCollection.CopyTo(Schematron.Schema[],System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="array" type="Schematron.Schema[]" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="IndexOf" id="M:Schematron.SchemaCollection.IndexOf(Schematron.Schema)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Schema" />
          </method>
          <method name="Insert" id="M:Schematron.SchemaCollection.Insert(System.Int32,Schematron.Schema)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="Schematron.Schema" />
          </method>
          <method name="Remove" id="M:Schematron.SchemaCollection.Remove(Schematron.Schema)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Schema" />
          </method>
          <method name="GetType" id="M:Schematron.SchemaCollection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.SchemaCollection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="SchemaLoader" id="T:Schematron.SchemaLoader" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.SchemaLoader.#ctor(Schematron.Schema)" access="Public">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schema" type="Schematron.Schema" />
          </constructor>
          <field name="_schema" id="F:Schematron.SchemaLoader._schema" access="Private" type="Schematron.Schema" />
          <field name="_filenav" id="F:Schematron.SchemaLoader._filenav" access="Private" type="System.Xml.XPath.XPathNavigator" />
          <field name="_abstracts" id="F:Schematron.SchemaLoader._abstracts" access="Private" type="System.Collections.Hashtable" />
          <method name="LoadSchema" id="M:Schematron.SchemaLoader.LoadSchema(System.Xml.XPath.XPathNavigator)" access="Public" contract="Virtual" returnType="System.Void">
            <documentation>
              <summary />
              <param name="source">
              </param>
            </documentation>
            <parameter name="source" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.SchemaLoader.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.SchemaLoader.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.SchemaLoader.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.SchemaLoader.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="LoadSchemaElement" id="M:Schematron.SchemaLoader.LoadSchemaElement(System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="LoadSchemaElements" id="M:Schematron.SchemaLoader.LoadSchemaElements(System.Xml.XPath.XPathNodeIterator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="children" type="System.Xml.XPath.XPathNodeIterator" />
          </method>
          <method name="RetrieveAbstractRules" id="M:Schematron.SchemaLoader.RetrieveAbstractRules" access="Private" contract="Normal" returnType="System.Void" />
          <method name="LoadPhases" id="M:Schematron.SchemaLoader.LoadPhases" access="Private" contract="Normal" returnType="System.Void" />
          <method name="LoadPatterns" id="M:Schematron.SchemaLoader.LoadPatterns" access="Private" contract="Normal" returnType="System.Void" />
          <method name="LoadRules" id="M:Schematron.SchemaLoader.LoadRules(Schematron.Pattern,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="pattern" type="Schematron.Pattern" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="LoadExtends" id="M:Schematron.SchemaLoader.LoadExtends(Schematron.Rule,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="rule" type="Schematron.Rule" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="LoadAsserts" id="M:Schematron.SchemaLoader.LoadAsserts(Schematron.Rule,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="rule" type="Schematron.Rule" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="LoadReports" id="M:Schematron.SchemaLoader.LoadReports(Schematron.Rule,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="rule" type="Schematron.Rule" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="GetType" id="M:Schematron.SchemaLoader.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.SchemaLoader.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="SyncEvaluationContext" id="T:Schematron.SyncEvaluationContext" access="Public" baseType="EvaluationContextBase">
          <documentation>
            <summary>
            Evaluates all the schema elements synchronously.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <remarks>
            See <see cref="T:Schematron.EvaluationContextBase" /> for a description of the purpose and 
            of evaluation contexts, and where are they used.
            </remarks>
          </documentation>
          <base name="EvaluationContextBase" id="T:Schematron.EvaluationContextBase" type="Schematron.EvaluationContextBase" />
          <constructor name=".ctor" id="M:Schematron.SyncEvaluationContext.#ctor" access="Public">
            <documentation>
              <summary>Creates the evaluation context</summary>
            </documentation>
          </constructor>
          <field name="Matched" id="F:Schematron.SyncEvaluationContext.Matched" access="Family" type="Schematron.IMatchedNodes" declaringType="Schematron.EvaluationContextBase" />
          <property name="Formatter" id="P:Schematron.SyncEvaluationContext.Formatter" access="Public" declaringType="Schematron.EvaluationContextBase" type="Schematron.Formatters.IFormatter" contract="Normal" get="true" set="true" />
          <property name="Messages" id="P:Schematron.SyncEvaluationContext.Messages" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.String" contract="Normal" get="true" set="true" />
          <property name="Phase" id="P:Schematron.SyncEvaluationContext.Phase" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.String" contract="Normal" get="true" set="true" />
          <property name="Schema" id="P:Schematron.SyncEvaluationContext.Schema" access="Public" declaringType="Schematron.EvaluationContextBase" type="Schematron.Schema" contract="Normal" get="true" set="true" />
          <property name="ShowReports" id="P:Schematron.SyncEvaluationContext.ShowReports" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.Boolean" contract="Normal" get="true" set="true" />
          <property name="Source" id="P:Schematron.SyncEvaluationContext.Source" access="Public" declaringType="Schematron.EvaluationContextBase" type="System.Xml.XPath.XPathNavigator" contract="Normal" get="true" set="true" />
          <method name="Start" id="M:Schematron.SyncEvaluationContext.Start(System.Object)" access="Public" declaringType="Schematron.EvaluationContextBase" contract="Virtual" overload="1" returnType="System.Void">
            <parameter name="state" type="System.Object" />
          </method>
          <method name="Start" id="M:Schematron.SyncEvaluationContext.Start" access="Public" contract="Override" overload="2" returnType="System.Void">
            <documentation>
              <summary>
            Starts the evaluation process.
            </summary>
              <remarks>
            When the process is finished, the results are placed 
            in the <see cref="P:Schematron.EvaluationContextBase.Messages" /> property.
            </remarks>
            </documentation>
          </method>
          <method name="Finalize" id="M:Schematron.SyncEvaluationContext.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.SyncEvaluationContext.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.SyncEvaluationContext.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.SyncEvaluationContext.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Evaluate" id="M:Schematron.SyncEvaluationContext.Evaluate(Schematron.Phase)" access="Private" contract="Normal" overload="1" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Phase" />.
            </summary>
              <remarks>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            </remarks>
              <param name="phase">The <see cref="T:Schematron.Phase" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Pattern" />, or <see cref="F:System.String.Empty" /> if there are no messages.</returns>
            </documentation>
            <parameter name="phase" type="Schematron.Phase" />
          </method>
          <method name="Evaluate" id="M:Schematron.SyncEvaluationContext.Evaluate(Schematron.Pattern)" access="Private" contract="Normal" overload="2" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Pattern" />.
            </summary>
              <remarks>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            <para>
            Clears the <see cref="F:Schematron.EvaluationContextBase.Matched" /> object before
            proceeding, as the restriction about node mathing (see <linkref id="schematron" />)
            applies only inside a single pattern.
            </para></remarks>
              <param name="pattern">The <see cref="T:Schematron.Pattern" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Rule" />, or <see cref="F:System.String.Empty" /> if there are no messages.</returns>
            </documentation>
            <parameter name="pattern" type="Schematron.Pattern" />
          </method>
          <method name="Evaluate" id="M:Schematron.SyncEvaluationContext.Evaluate(Schematron.Rule)" access="Private" contract="Normal" overload="3" returnType="System.String">
            <documentation>
              <summary>
            Evaluates the selected <see cref="T:Schematron.Rule" />.
            </summary>
              <remarks>
                <see cref="P:Schematron.Rule.Asserts" /> and <see cref="P:Schematron.Rule.Reports" /> are iterated
            and each <see cref="T:Schematron.Assert" /> and <see cref="T:Schematron.Report" /> is executed against
            the context selected by the <see cref="P:Schematron.Rule.Context" />.
            <para>
            Nodes matched are added to the <see cref="F:Schematron.EvaluationContextBase.Matched" /> list of 
            nodes to skip in the next rule, using the <see cref="M:Schematron.IMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" /> method.
            This object is a strategy object which implements different algorithms for matching and 
            saving node references, as the actual <see cref="T:System.Xml.XPath.XPathNavigator" /> implementation provides
            different methods for accessing the underlying source. 
            <para>
            This makes the implementation both performant and compliant with
            the restriction about node mathing (see <linkref id="schematron" />) in the spec.
            </para><para><seealso cref="T:Schematron.DomMatchedNodes" /><seealso cref="T:Schematron.XPathMatchedNodes" /><seealso cref="T:Schematron.GenericMatchedNodes" /></para>
            As most of the other evaluation methods, it repositions the 
            <see cref="P:Schematron.EvaluationContextBase.Source" /> navigator on the root node.
            </para></remarks>
              <param name="rule">The <see cref="T:Schematron.Rule" /> to evaluate.</param>
              <returns>The messages accumulated by the evaluation of all the child
            <see cref="T:Schematron.Assert" /> and <see cref="T:Schematron.Report" />, or <see cref="F:System.String.Empty" /> 
            if there are no messages to show.</returns>
              <exception cref="T:System.InvalidOperationException">
            The rule to evaluate is abstract (see <see cref="P:Schematron.Rule.IsAbstract" />).
            </exception>
            </documentation>
            <parameter name="rule" type="Schematron.Rule" />
          </method>
          <method name="EvaluateAssert" id="M:Schematron.SyncEvaluationContext.EvaluateAssert(Schematron.Assert,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Performs the evaluation of the <see cref="T:Schematron.Assert" />.
            </summary>
              <remarks>
            This is where the actual assert expression is evaluated. If
            the <see cref="P:Schematron.EvaluableExpression.Expression" /> returns false, 
            a formated message is generated from the <see cref="P:Schematron.Test.Message" /> property.
            </remarks>
              <param name="assert">The <see cref="T:Schematron.Assert" /> to evaluate.</param>
              <param name="context">The context node for the execution.</param>
              <returns>The formatted message for a failing <see cref="T:Schematron.Assert" />, or 
            <see cref="F:System.String.Empty" />.
            </returns>
            </documentation>
            <parameter name="assert" type="Schematron.Assert" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="EvaluateReport" id="M:Schematron.SyncEvaluationContext.EvaluateReport(Schematron.Report,System.Xml.XPath.XPathNavigator)" access="Private" contract="Normal" returnType="System.String">
            <documentation>
              <summary>
            Performs the evaluation of the <see cref="T:Schematron.Report" />.
            </summary>
              <remarks>
            This is where the actual report expression is evaluated. If
            the <see cref="P:Schematron.EvaluableExpression.Expression" /> returns true, 
            a formated message is generated from the <see cref="P:Schematron.Test.Message" /> property.
            </remarks>
              <param name="report">The <see cref="T:Schematron.Report" /> to evaluate.</param>
              <param name="context">The context node for the execution.</param>
              <returns>The formatted message for a succesful <see cref="T:Schematron.Report" />, or 
            <see cref="F:System.String.Empty" />.
            </returns>
            </documentation>
            <parameter name="report" type="Schematron.Report" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="GetType" id="M:Schematron.SyncEvaluationContext.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.SyncEvaluationContext.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="TagExpressions" id="T:Schematron.TagExpressions" access="NotPublic">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.TagExpressions.#ctor" access="Private">
            <documentation>
              <summary>Initializes a new instance of the TagExpressions class.</summary>
            </documentation>
          </constructor>
          <field name="Name" id="F:Schematron.TagExpressions.Name" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static">
            <documentation>
              <summary>
            The compiled regular expression to replace the special <c>name</c> tag inside a message.
            </summary>
              <remarks>
            Replaces each instance of <c>name</c> tags with the value un the current context element.
            </remarks>
            </documentation>
          </field>
          <field name="Emph" id="F:Schematron.TagExpressions.Emph" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="Dir" id="F:Schematron.TagExpressions.Dir" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="Span" id="F:Schematron.TagExpressions.Span" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="Para" id="F:Schematron.TagExpressions.Para" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="Any" id="F:Schematron.TagExpressions.Any" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <field name="AllSchematron" id="F:Schematron.TagExpressions.AllSchematron" access="Public" type="System.Text.RegularExpressions.Regex" contract="Static" />
          <method name="Finalize" id="M:Schematron.TagExpressions.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.TagExpressions.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.TagExpressions.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.TagExpressions.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.TagExpressions.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.TagExpressions.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="TestCollection" id="T:Schematron.TestCollection" access="Public" baseType="CollectionBase">
          <documentation>
            <summary>A collection of Test elements.</summary>
            <author ref="dcazzulino" />
            <progress amount="100" />
          </documentation>
          <attribute name="System.Reflection.DefaultMemberAttribute">
            <property name="MemberName" type="System.String" value="Item" />
            <property name="TypeId" type="System.Object" value="System.Reflection.DefaultMemberAttribute" />
          </attribute>
          <base name="CollectionBase" id="T:System.Collections.CollectionBase" type="System.Collections.CollectionBase" />
          <implements>IList</implements>
          <implements>ICollection</implements>
          <implements>IEnumerable</implements>
          <constructor name=".ctor" id="M:Schematron.TestCollection.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the TestCollection class.</summary>
              <summary />
            </documentation>
          </constructor>
          <property name="Item" id="P:Schematron.TestCollection.Item(System.Int32)" access="Public" type="Schematron.Test" contract="Normal" get="true" set="true">
            <documentation>
              <summary>Returns the Test element at the specified position.</summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
          </property>
          <property name="InnerList" id="P:Schematron.TestCollection.InnerList" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.ArrayList" contract="Normal" get="true" set="false" />
          <property name="List" id="P:Schematron.TestCollection.List" access="Family" declaringType="System.Collections.CollectionBase" type="System.Collections.IList" contract="Normal" get="true" set="false" />
          <property name="Count" id="P:Schematron.TestCollection.Count" access="Public" declaringType="System.Collections.CollectionBase" type="System.Int32" contract="Final" get="true" set="false" />
          <method name="GetEnumerator" id="M:Schematron.TestCollection.GetEnumerator" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Collections.IEnumerator" />
          <method name="RemoveAt" id="M:Schematron.TestCollection.RemoveAt(System.Int32)" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Clear" id="M:Schematron.TestCollection.Clear" access="Public" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void" />
          <method name="OnRemoveComplete" id="M:Schematron.TestCollection.OnRemoveComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClearComplete" id="M:Schematron.TestCollection.OnClearComplete" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsertComplete" id="M:Schematron.TestCollection.OnInsertComplete(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSetComplete" id="M:Schematron.TestCollection.OnSetComplete(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="OnValidate" id="M:Schematron.TestCollection.OnValidate(System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnRemove" id="M:Schematron.TestCollection.OnRemove(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnClear" id="M:Schematron.TestCollection.OnClear" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void" />
          <method name="OnInsert" id="M:Schematron.TestCollection.OnInsert(System.Int32,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="OnSet" id="M:Schematron.TestCollection.OnSet(System.Int32,System.Object,System.Object)" access="Family" declaringType="System.Collections.CollectionBase" contract="Virtual" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="oldValue" type="System.Object" />
            <parameter name="newValue" type="System.Object" />
          </method>
          <method name="Insert" id="M:Schematron.TestCollection.System#Collections#IList#Insert(System.Int32,System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="System.Object" />
          </method>
          <method name="IndexOf" id="M:Schematron.TestCollection.System#Collections#IList#IndexOf(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Remove" id="M:Schematron.TestCollection.System#Collections#IList#Remove(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Add" id="M:Schematron.TestCollection.System#Collections#IList#Add(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Int32">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="Contains" id="M:Schematron.TestCollection.System#Collections#IList#Contains(System.Object)" access="Private" interface="System.Collections.IList" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Boolean">
            <parameter name="value" type="System.Object" />
          </method>
          <method name="CopyTo" id="M:Schematron.TestCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" access="Private" interface="System.Collections.ICollection" declaringType="System.Collections.CollectionBase" contract="Final" returnType="System.Void">
            <parameter name="array" type="System.Array" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="Finalize" id="M:Schematron.TestCollection.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.TestCollection.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.TestCollection.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.TestCollection.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="Add" id="M:Schematron.TestCollection.Add(Schematron.Test)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary />
            </documentation>
            <parameter name="value" type="Schematron.Test" />
          </method>
          <method name="AddRange" id="M:Schematron.TestCollection.AddRange(Schematron.Test[])" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.Test[]" />
          </method>
          <method name="AddRange" id="M:Schematron.TestCollection.AddRange(Schematron.TestCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="values" type="Schematron.TestCollection" />
          </method>
          <method name="Contains" id="M:Schematron.TestCollection.Contains(Schematron.Test)" access="Public" contract="Normal" returnType="System.Boolean">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Test" />
          </method>
          <method name="CopyTo" id="M:Schematron.TestCollection.CopyTo(Schematron.Test[],System.Int32)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="array" type="Schematron.Test[]" />
            <parameter name="index" type="System.Int32" />
          </method>
          <method name="IndexOf" id="M:Schematron.TestCollection.IndexOf(Schematron.Test)" access="Public" contract="Normal" returnType="System.Int32">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Test" />
          </method>
          <method name="Insert" id="M:Schematron.TestCollection.Insert(System.Int32,Schematron.Test)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="index" type="System.Int32" />
            <parameter name="value" type="Schematron.Test" />
          </method>
          <method name="Remove" id="M:Schematron.TestCollection.Remove(Schematron.Test)" access="Public" contract="Normal" returnType="System.Void">
            <documentation>
              <summary>
              </summary>
            </documentation>
            <parameter name="value" type="Schematron.Test" />
          </method>
          <method name="GetType" id="M:Schematron.TestCollection.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.TestCollection.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="Validator" id="T:Schematron.Validator" access="Public">
          <documentation>
            <summary />
          </documentation>
          <constructor name=".ctor" id="M:Schematron.Validator.#ctor" access="Public" overload="1">
            <documentation>
              <summary>Initializes a new instance of the Validator class.</summary>
              <summary />
            </documentation>
          </constructor>
          <constructor name=".ctor" id="M:Schematron.Validator.#ctor(Schematron.OutputFormatting)" access="Public" overload="2">
            <documentation>
              <summary />
            </documentation>
            <parameter name="format" type="Schematron.OutputFormatting" />
          </constructor>
          <field name="_xmlschemas" id="F:Schematron.Validator._xmlschemas" access="Private" type="System.Xml.Schema.XmlSchemaCollection" />
          <field name="_schematrons" id="F:Schematron.Validator._schematrons" access="Private" type="Schematron.SchemaCollection" />
          <field name="_evaluationctx" id="F:Schematron.Validator._evaluationctx" access="Private" type="Schematron.EvaluationContextBase" />
          <field name="_errors" id="F:Schematron.Validator._errors" access="Private" type="System.Text.StringBuilder" />
          <field name="_haserrors" id="F:Schematron.Validator._haserrors" access="Private" type="System.Boolean" />
          <property name="Context" id="P:Schematron.Validator.Context" access="Public" type="Schematron.EvaluationContextBase" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Formatter" id="P:Schematron.Validator.Formatter" access="Public" type="Schematron.Formatters.IFormatter" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Messages" id="P:Schematron.Validator.Messages" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="Phase" id="P:Schematron.Validator.Phase" access="Public" type="System.String" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <property name="ShowReports" id="P:Schematron.Validator.ShowReports" access="Public" type="System.Boolean" contract="Normal" get="true" set="true">
            <documentation>
              <summary />
            </documentation>
          </property>
          <method name="Finalize" id="M:Schematron.Validator.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.Validator.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.Validator.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.Validator.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.Xml.Schema.XmlSchema)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schema" type="System.Xml.Schema.XmlSchema" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(Schematron.Schema)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schema" type="Schematron.Schema" />
          </method>
          <method name="AddSchemas" id="M:Schematron.Validator.AddSchemas(System.Xml.Schema.XmlSchemaCollection)" access="Public" contract="Normal" overload="1" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schemas" type="System.Xml.Schema.XmlSchemaCollection" />
          </method>
          <method name="AddSchemas" id="M:Schematron.Validator.AddSchemas(Schematron.SchemaCollection)" access="Public" contract="Normal" overload="2" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="schemas" type="Schematron.SchemaCollection" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.String)" access="Public" contract="Normal" overload="3" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="uri" type="System.String" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.String,Schematron.SchemaType)" access="Public" contract="Normal" overload="4" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="uri" type="System.String" />
            <parameter name="type" type="Schematron.SchemaType" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.IO.TextReader)" access="Public" contract="Normal" overload="5" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.IO.TextReader" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.IO.TextReader,Schematron.SchemaType)" access="Public" contract="Normal" overload="6" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.IO.TextReader" />
            <parameter name="type" type="Schematron.SchemaType" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.IO.Stream)" access="Public" contract="Normal" overload="7" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="input" type="System.IO.Stream" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.IO.Stream,Schematron.SchemaType)" access="Public" contract="Normal" overload="8" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="input" type="System.IO.Stream" />
            <parameter name="type" type="Schematron.SchemaType" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.Xml.XmlReader)" access="Public" contract="Normal" overload="9" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.Xml.XmlReader" />
          </method>
          <method name="AddSchema" id="M:Schematron.Validator.AddSchema(System.Xml.XmlReader,Schematron.SchemaType)" access="Public" contract="Normal" overload="10" returnType="System.Void">
            <documentation>
              <summary />
              <remarks>Where the actual work takes place</remarks>
            </documentation>
            <parameter name="reader" type="System.Xml.XmlReader" />
            <parameter name="type" type="Schematron.SchemaType" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.String)" access="Public" contract="Normal" overload="1" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="uri" type="System.String" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.IO.TextReader)" access="Public" contract="Normal" overload="2" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="reader" type="System.IO.TextReader" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.IO.Stream)" access="Public" contract="Normal" overload="3" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="input" type="System.IO.Stream" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.Xml.XPath.IXPathNavigable)" access="Public" contract="Normal" overload="4" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="source" type="System.Xml.XPath.IXPathNavigable" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.Xml.XPath.XPathNavigator)" access="Public" contract="Normal" overload="5" returnType="System.String">
            <documentation>
              <summary />
            </documentation>
            <parameter name="file" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Validate" id="M:Schematron.Validator.Validate(System.Xml.XmlReader)" access="Public" contract="Normal" overload="6" returnType="System.String">
            <documentation>
              <summary />
              <remarks>Where the actual work takes place</remarks>
            </documentation>
            <parameter name="reader" type="System.Xml.XmlReader" />
          </method>
          <method name="PerformValidation" id="M:Schematron.Validator.PerformValidation(Schematron.Schema)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="schema" type="Schematron.Schema" />
          </method>
          <method name="EndValidation" id="M:Schematron.Validator.EndValidation(System.IAsyncResult)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="result" type="System.IAsyncResult" />
          </method>
          <method name="OnValidation" id="M:Schematron.Validator.OnValidation(System.Object,System.Xml.Schema.ValidationEventArgs)" access="Private" contract="Normal" returnType="System.Void">
            <parameter name="sender" type="System.Object" />
            <parameter name="e" type="System.Xml.Schema.ValidationEventArgs" />
          </method>
          <method name="GetType" id="M:Schematron.Validator.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.Validator.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <class name="XPathMatchedNodes" id="T:Schematron.XPathMatchedNodes" access="NotPublic">
          <documentation>
            <summary />
          </documentation>
          <implements>IMatchedNodes</implements>
          <constructor name=".ctor" id="M:Schematron.XPathMatchedNodes.#ctor" access="Public">
            <documentation>
              <summary>Initializes a new instance of the XPathMatchedNodes class.</summary>
              <summary />
            </documentation>
          </constructor>
          <field name="_matched" id="F:Schematron.XPathMatchedNodes._matched" access="Private" type="System.Collections.Hashtable" />
          <method name="Clear" id="M:Schematron.XPathMatchedNodes.Clear" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="AddMatched" id="M:Schematron.XPathMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="IsMatched" id="M:Schematron.XPathMatchedNodes.IsMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Final" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="Finalize" id="M:Schematron.XPathMatchedNodes.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.XPathMatchedNodes.GetHashCode" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.XPathMatchedNodes.Equals(System.Object)" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.XPathMatchedNodes.ToString" access="Public" declaringType="System.Object" contract="Virtual" returnType="System.String" />
          <method name="GetType" id="M:Schematron.XPathMatchedNodes.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.XPathMatchedNodes.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </class>
        <interface name="IAssemblyInfo" id="T:Schematron.IAssemblyInfo" access="NotPublic">
          <documentation>
            <summary>
            Contains assembly level documentation.
            </summary>
            <license>MPL1.1</license>
            <author id="dcazzulino" name="Daniel Cazzulino" email="nmatrixdotnet@msn.com">Project starter.</author>
            <link id="schematron" url="http://www.ascc.net/xml/resource/schematron/schematron2000.html">Schematron Specification</link>
          </documentation>
        </interface>
        <interface name="IMatchedNodes" id="T:Schematron.IMatchedNodes" access="Public">
          <documentation>
            <summary />
          </documentation>
          <method name="Clear" id="M:Schematron.IMatchedNodes.Clear" access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
          </method>
          <method name="AddMatched" id="M:Schematron.IMatchedNodes.AddMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" returnType="System.Void">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
          <method name="IsMatched" id="M:Schematron.IMatchedNodes.IsMatched(System.Xml.XPath.XPathNavigator)" access="Public" contract="Abstract" returnType="System.Boolean">
            <documentation>
              <summary />
            </documentation>
            <parameter name="node" type="System.Xml.XPath.XPathNavigator" />
          </method>
        </interface>
        <structure name="AsyncEvaluationContext.AsyncAssertState" id="T:Schematron.AsyncEvaluationContext.AsyncAssertState" access="NestedPrivate">
          <documentation>
            <summary>
            Structure to pass state around for asynchonous execution.
            </summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <constructor name=".ctor" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.#ctor(Schematron.Assert,System.Text.StringBuilder,System.Xml.XPath.XPathNavigator)" access="Public">
            <parameter name="assert" type="Schematron.Assert" />
            <parameter name="builder" type="System.Text.StringBuilder" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </constructor>
          <field name="Assert" id="F:Schematron.AsyncEvaluationContext.AsyncAssertState.Assert" access="Public" type="Schematron.Assert" />
          <field name="Builder" id="F:Schematron.AsyncEvaluationContext.AsyncAssertState.Builder" access="Public" type="System.Text.StringBuilder" />
          <field name="Context" id="F:Schematron.AsyncEvaluationContext.AsyncAssertState.Context" access="Public" type="System.Xml.XPath.XPathNavigator" />
          <method name="Finalize" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.GetHashCode" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.Equals(System.Object)" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.ToString" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.String" />
          <method name="GetType" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.AsyncEvaluationContext.AsyncAssertState.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </structure>
        <structure name="AsyncEvaluationContext.AsyncReportState" id="T:Schematron.AsyncEvaluationContext.AsyncReportState" access="NestedPrivate">
          <documentation>
            <summary>
            Structure to pass state around for asynchonous execution.
            </summary>
          </documentation>
          <base name="ValueType" id="T:System.ValueType" type="System.ValueType" />
          <constructor name=".ctor" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.#ctor(Schematron.Report,System.Text.StringBuilder,System.Xml.XPath.XPathNavigator)" access="Public">
            <parameter name="report" type="Schematron.Report" />
            <parameter name="builder" type="System.Text.StringBuilder" />
            <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
          </constructor>
          <field name="Report" id="F:Schematron.AsyncEvaluationContext.AsyncReportState.Report" access="Public" type="Schematron.Report" />
          <field name="Builder" id="F:Schematron.AsyncEvaluationContext.AsyncReportState.Builder" access="Public" type="System.Text.StringBuilder" />
          <field name="Context" id="F:Schematron.AsyncEvaluationContext.AsyncReportState.Context" access="Public" type="System.Xml.XPath.XPathNavigator" />
          <method name="Finalize" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.Finalize" access="Family" declaringType="System.Object" contract="Override" returnType="System.Void" />
          <method name="GetHashCode" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.GetHashCode" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Int32" />
          <method name="Equals" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.Equals(System.Object)" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.Boolean">
            <parameter name="obj" type="System.Object" />
          </method>
          <method name="ToString" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.ToString" access="Public" declaringType="System.ValueType" contract="Override" returnType="System.String" />
          <method name="GetType" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.GetType" access="Public" declaringType="System.Object" contract="Normal" returnType="System.Type" />
          <method name="MemberwiseClone" id="M:Schematron.AsyncEvaluationContext.AsyncReportState.MemberwiseClone" access="Family" declaringType="System.Object" contract="Normal" returnType="System.Object" />
        </structure>
        <delegate name="AsyncAssertEvaluate" id="T:Schematron.AsyncAssertEvaluate" access="NotPublic" returnType="System.String">
          <documentation>
            <summary>
            Private delegate used in <see cref="T:Schematron.AsyncEvaluationContext" /> to call
            evaluation asynchronously against an <see cref="T:Schematron.Assert" /> object.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <example>
            This in an example of the delegate creation and asynchronous execution.
            <code>AsyncAssertEvaluate eval = new AsyncAssertEvaluate(EvaluateAssert);
            eval.BeginInvoke(
            	assert, 
            	context, 
            	new AsyncCallback(OnAssertCompleted), 
            	state);
            </code></example>
          </documentation>
          <parameter name="assert" type="Schematron.Assert" />
          <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
        </delegate>
        <delegate name="AsyncReportEvaluate" id="T:Schematron.AsyncReportEvaluate" access="Public" returnType="System.String">
          <documentation>
            <summary>
            Private delegate used in <see cref="T:Schematron.AsyncEvaluationContext" /> to call
            evaluation asynchronously against an <see cref="T:Schematron.Report" /> object.
            </summary>
            <authorref id="dcazzulino" />
            <progress amount="100" />
            <example>
            This in an example of the delegate creation and asynchronous execution.
            <code>AsyncReportEvaluate eval = new AsyncReportEvaluate(EvaluateReport);
            eval.BeginInvoke(
            	report, 
            	context, 
            	new AsyncCallback(OnReportCompleted), 
            	state);
            </code></example>
          </documentation>
          <parameter name="report" type="Schematron.Report" />
          <parameter name="context" type="System.Xml.XPath.XPathNavigator" />
        </delegate>
        <delegate name="pepe" id="T:Schematron.pepe" access="Public" returnType="System.Void">
          <documentation>
            <summary>
            Evaluates Test
            </summary>
            <remarks>
            Para 1?
            <para>
            Test para1
            </para><para>
            Test para2
            </para></remarks>
            <example>
            This is an example
            <code>
            this is code;
            </code></example>
          </documentation>
          <parameter name="sender" type="System.Object" />
          <parameter name="e" type="System.EventArgs" />
        </delegate>
        <delegate name="StartDelegate" id="T:Schematron.StartDelegate" access="Public" returnType="System.Void">
          <documentation>
            <summary />
          </documentation>
        </delegate>
        <enumeration name="OutputFormatting" id="T:Schematron.OutputFormatting" access="Public">
          <documentation>
            <summary />
          </documentation>
          <field name="Boolean" id="F:Schematron.OutputFormatting.Boolean" access="Public" type="Schematron.OutputFormatting" contract="Static" literal="true">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="Log" id="F:Schematron.OutputFormatting.Log" access="Public" type="Schematron.OutputFormatting" contract="Static" literal="true">
            <documentation>
              <summary />
            </documentation>
          </field>
          <field name="Simple" id="F:Schematron.OutputFormatting.Simple" access="Public" type="Schematron.OutputFormatting" contract="Static" literal="true">
            <documentation>
              <summary />
            </documentation>
          </field>
        </enumeration>
        <enumeration name="SchemaType" id="T:Schematron.SchemaType" access="Public">
          <documentation>
            <summary />
          </documentation>
          <field name="Embedded" id="F:Schematron.SchemaType.Embedded" access="Public" type="Schematron.SchemaType" contract="Static" literal="true">
            <documentation>
              <summary>
            A Schematron schema is embedded in another XML schema, such as XSD or XDR.
            Both schemas will be loaded.
            </summary>
            </documentation>
          </field>
          <field name="Schema" id="F:Schematron.SchemaType.Schema" access="Public" type="Schematron.SchemaType" contract="Static" literal="true">
            <documentation>
              <summary>
            W3C XML Schema only.
            </summary>
            </documentation>
          </field>
          <field name="Schematron" id="F:Schematron.SchemaType.Schematron" access="Public" type="Schematron.SchemaType" contract="Static" literal="true">
            <documentation>
              <summary>
            Schematron schema only. 
            </summary>
            </documentation>
          </field>
          <field name="XDR" id="F:Schematron.SchemaType.XDR" access="Public" type="Schematron.SchemaType" contract="Static" literal="true">
            <documentation>
              <summary>
            MSXML XDR schema only.
            </summary>
            </documentation>
          </field>
        </enumeration>
      </namespace>
    </module>
  </assembly>
</ndoc>